// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/wasm_storage/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The request message for QueryOracleProgram RPC.
type QueryOracleProgramRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryOracleProgramRequest) Reset()         { *m = QueryOracleProgramRequest{} }
func (m *QueryOracleProgramRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleProgramRequest) ProtoMessage()    {}
func (*QueryOracleProgramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{0}
}
func (m *QueryOracleProgramRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleProgramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleProgramRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleProgramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleProgramRequest.Merge(m, src)
}
func (m *QueryOracleProgramRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleProgramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleProgramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleProgramRequest proto.InternalMessageInfo

func (m *QueryOracleProgramRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// The response message for QueryOracleProgram RPC.
type QueryOracleProgramResponse struct {
	OracleProgram *OracleProgram `protobuf:"bytes,1,opt,name=oracle_program,json=oracleProgram,proto3" json:"oracle_program,omitempty"`
}

func (m *QueryOracleProgramResponse) Reset()         { *m = QueryOracleProgramResponse{} }
func (m *QueryOracleProgramResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleProgramResponse) ProtoMessage()    {}
func (*QueryOracleProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{1}
}
func (m *QueryOracleProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleProgramResponse.Merge(m, src)
}
func (m *QueryOracleProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleProgramResponse proto.InternalMessageInfo

func (m *QueryOracleProgramResponse) GetOracleProgram() *OracleProgram {
	if m != nil {
		return m.OracleProgram
	}
	return nil
}

// The request message for QueryOraclePrograms RPC.
type QueryOracleProgramsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOracleProgramsRequest) Reset()         { *m = QueryOracleProgramsRequest{} }
func (m *QueryOracleProgramsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleProgramsRequest) ProtoMessage()    {}
func (*QueryOracleProgramsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{2}
}
func (m *QueryOracleProgramsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleProgramsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleProgramsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleProgramsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleProgramsRequest.Merge(m, src)
}
func (m *QueryOracleProgramsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleProgramsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleProgramsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleProgramsRequest proto.InternalMessageInfo

func (m *QueryOracleProgramsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The response message for QueryOraclePrograms RPC.
type QueryOracleProgramsResponse struct {
	List       []string            `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOracleProgramsResponse) Reset()         { *m = QueryOracleProgramsResponse{} }
func (m *QueryOracleProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleProgramsResponse) ProtoMessage()    {}
func (*QueryOracleProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{3}
}
func (m *QueryOracleProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleProgramsResponse.Merge(m, src)
}
func (m *QueryOracleProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleProgramsResponse proto.InternalMessageInfo

func (m *QueryOracleProgramsResponse) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryOracleProgramsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The request message for QueryExecutorWasm RPC.
type QueryExecutorWasmRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryExecutorWasmRequest) Reset()         { *m = QueryExecutorWasmRequest{} }
func (m *QueryExecutorWasmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExecutorWasmRequest) ProtoMessage()    {}
func (*QueryExecutorWasmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{4}
}
func (m *QueryExecutorWasmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutorWasmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutorWasmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutorWasmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutorWasmRequest.Merge(m, src)
}
func (m *QueryExecutorWasmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutorWasmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutorWasmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutorWasmRequest proto.InternalMessageInfo

func (m *QueryExecutorWasmRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// The response message for QueryExecutorWasm RPC.
type QueryExecutorWasmResponse struct {
	Wasm *ExecutorWasm `protobuf:"bytes,1,opt,name=wasm,proto3" json:"wasm,omitempty"`
}

func (m *QueryExecutorWasmResponse) Reset()         { *m = QueryExecutorWasmResponse{} }
func (m *QueryExecutorWasmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExecutorWasmResponse) ProtoMessage()    {}
func (*QueryExecutorWasmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{5}
}
func (m *QueryExecutorWasmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutorWasmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutorWasmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutorWasmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutorWasmResponse.Merge(m, src)
}
func (m *QueryExecutorWasmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutorWasmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutorWasmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutorWasmResponse proto.InternalMessageInfo

func (m *QueryExecutorWasmResponse) GetWasm() *ExecutorWasm {
	if m != nil {
		return m.Wasm
	}
	return nil
}

// The request message for QueryExecutorWasms RPC.
type QueryExecutorWasmsRequest struct {
}

func (m *QueryExecutorWasmsRequest) Reset()         { *m = QueryExecutorWasmsRequest{} }
func (m *QueryExecutorWasmsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExecutorWasmsRequest) ProtoMessage()    {}
func (*QueryExecutorWasmsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{6}
}
func (m *QueryExecutorWasmsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutorWasmsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutorWasmsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutorWasmsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutorWasmsRequest.Merge(m, src)
}
func (m *QueryExecutorWasmsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutorWasmsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutorWasmsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutorWasmsRequest proto.InternalMessageInfo

// The response message for QueryExecutorWasms RPC.
type QueryExecutorWasmsResponse struct {
	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *QueryExecutorWasmsResponse) Reset()         { *m = QueryExecutorWasmsResponse{} }
func (m *QueryExecutorWasmsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExecutorWasmsResponse) ProtoMessage()    {}
func (*QueryExecutorWasmsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{7}
}
func (m *QueryExecutorWasmsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutorWasmsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutorWasmsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutorWasmsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutorWasmsResponse.Merge(m, src)
}
func (m *QueryExecutorWasmsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutorWasmsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutorWasmsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutorWasmsResponse proto.InternalMessageInfo

func (m *QueryExecutorWasmsResponse) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

// The request message for QueryCoreContractRegistry RPC.
type QueryCoreContractRegistryRequest struct {
}

func (m *QueryCoreContractRegistryRequest) Reset()         { *m = QueryCoreContractRegistryRequest{} }
func (m *QueryCoreContractRegistryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCoreContractRegistryRequest) ProtoMessage()    {}
func (*QueryCoreContractRegistryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{8}
}
func (m *QueryCoreContractRegistryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoreContractRegistryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoreContractRegistryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoreContractRegistryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoreContractRegistryRequest.Merge(m, src)
}
func (m *QueryCoreContractRegistryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoreContractRegistryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoreContractRegistryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoreContractRegistryRequest proto.InternalMessageInfo

// The response message for QueryCoreContractRegistry RPC.
type QueryCoreContractRegistryResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryCoreContractRegistryResponse) Reset()         { *m = QueryCoreContractRegistryResponse{} }
func (m *QueryCoreContractRegistryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCoreContractRegistryResponse) ProtoMessage()    {}
func (*QueryCoreContractRegistryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e3a991a3b0319b3, []int{9}
}
func (m *QueryCoreContractRegistryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoreContractRegistryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoreContractRegistryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoreContractRegistryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoreContractRegistryResponse.Merge(m, src)
}
func (m *QueryCoreContractRegistryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoreContractRegistryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoreContractRegistryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoreContractRegistryResponse proto.InternalMessageInfo

func (m *QueryCoreContractRegistryResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryOracleProgramRequest)(nil), "sedachain.wasm_storage.v1.QueryOracleProgramRequest")
	proto.RegisterType((*QueryOracleProgramResponse)(nil), "sedachain.wasm_storage.v1.QueryOracleProgramResponse")
	proto.RegisterType((*QueryOracleProgramsRequest)(nil), "sedachain.wasm_storage.v1.QueryOracleProgramsRequest")
	proto.RegisterType((*QueryOracleProgramsResponse)(nil), "sedachain.wasm_storage.v1.QueryOracleProgramsResponse")
	proto.RegisterType((*QueryExecutorWasmRequest)(nil), "sedachain.wasm_storage.v1.QueryExecutorWasmRequest")
	proto.RegisterType((*QueryExecutorWasmResponse)(nil), "sedachain.wasm_storage.v1.QueryExecutorWasmResponse")
	proto.RegisterType((*QueryExecutorWasmsRequest)(nil), "sedachain.wasm_storage.v1.QueryExecutorWasmsRequest")
	proto.RegisterType((*QueryExecutorWasmsResponse)(nil), "sedachain.wasm_storage.v1.QueryExecutorWasmsResponse")
	proto.RegisterType((*QueryCoreContractRegistryRequest)(nil), "sedachain.wasm_storage.v1.QueryCoreContractRegistryRequest")
	proto.RegisterType((*QueryCoreContractRegistryResponse)(nil), "sedachain.wasm_storage.v1.QueryCoreContractRegistryResponse")
}

func init() {
	proto.RegisterFile("sedachain/wasm_storage/v1/query.proto", fileDescriptor_0e3a991a3b0319b3)
}

var fileDescriptor_0e3a991a3b0319b3 = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x4b, 0xa0, 0x62, 0x21, 0x3d, 0xac, 0x38, 0xa4, 0x2e, 0xb2, 0x82, 0x25, 0x48, 0xa8,
	0xc8, 0x6e, 0xd2, 0xdf, 0x43, 0xe1, 0x42, 0x05, 0x1c, 0xdb, 0xe6, 0x02, 0xe2, 0x12, 0x6d, 0x9c,
	0x95, 0x63, 0x29, 0xf1, 0xba, 0xbb, 0x9b, 0xd0, 0x80, 0xb8, 0xf0, 0x04, 0x48, 0xbc, 0x01, 0x77,
	0x24, 0x90, 0x78, 0x08, 0xc4, 0xa9, 0x12, 0x17, 0x8e, 0x28, 0xe1, 0x41, 0x90, 0xd7, 0x6b, 0x9a,
	0x45, 0x76, 0x7e, 0xb8, 0xd9, 0xf1, 0x7c, 0x3f, 0xf3, 0xcd, 0x8c, 0x02, 0xee, 0x0a, 0xda, 0x21,
	0x5e, 0x97, 0x04, 0x21, 0x7e, 0x45, 0x44, 0xbf, 0x25, 0x24, 0xe3, 0xc4, 0xa7, 0x78, 0xd8, 0xc0,
	0x67, 0x03, 0xca, 0x47, 0x28, 0xe2, 0x4c, 0x32, 0xb8, 0xf1, 0xb7, 0x0c, 0x4d, 0x97, 0xa1, 0x61,
	0xc3, 0xbe, 0xed, 0x33, 0xe6, 0xf7, 0x28, 0x26, 0x51, 0x80, 0x49, 0x18, 0x32, 0x49, 0x64, 0xc0,
	0x42, 0x91, 0x00, 0xed, 0x2d, 0x8f, 0x89, 0x3e, 0x13, 0xb8, 0x4d, 0x04, 0x4d, 0x18, 0xf1, 0xb0,
	0xd1, 0xa6, 0x92, 0x34, 0x70, 0x44, 0xfc, 0x20, 0x54, 0xc5, 0xba, 0xf6, 0x41, 0xbe, 0x17, 0x43,
	0x54, 0x55, 0xbb, 0x18, 0x6c, 0x9c, 0xc6, 0x7c, 0xc7, 0x9c, 0x78, 0x3d, 0x7a, 0xc2, 0x99, 0xcf,
	0x49, 0xbf, 0x49, 0xcf, 0x06, 0x54, 0x48, 0x08, 0x41, 0xa1, 0x4b, 0x44, 0xb7, 0x64, 0x95, 0xad,
	0xea, 0xf5, 0xa6, 0x7a, 0x76, 0xfb, 0xc0, 0xce, 0x02, 0x88, 0x88, 0x85, 0x82, 0xc2, 0x63, 0xb0,
	0xce, 0xd4, 0x87, 0x56, 0x94, 0x7c, 0x51, 0xd8, 0x1b, 0xdb, 0x55, 0x94, 0xdb, 0x3a, 0x32, 0x99,
	0x8a, 0x6c, 0xfa, 0xd5, 0xed, 0x64, 0xc9, 0x89, 0xd4, 0xe0, 0x53, 0x00, 0x2e, 0xfb, 0xd7, 0x52,
	0xf7, 0x50, 0x12, 0x16, 0x8a, 0xc3, 0x42, 0x49, 0xfc, 0x3a, 0x2c, 0x74, 0x42, 0x7c, 0xaa, 0xb1,
	0xcd, 0x29, 0xa4, 0xfb, 0x1a, 0x6c, 0x66, 0xaa, 0xe8, 0xae, 0x20, 0x28, 0xf4, 0x02, 0x21, 0x4b,
	0x56, 0xf9, 0x4a, 0x9c, 0x43, 0xfc, 0x0c, 0x9f, 0x19, 0xd2, 0xab, 0x4a, 0xba, 0x32, 0x57, 0x3a,
	0x21, 0x34, 0xb4, 0x11, 0x28, 0x29, 0xed, 0x27, 0xe7, 0xd4, 0x1b, 0x48, 0xc6, 0x9f, 0x13, 0x31,
	0x73, 0x00, 0x2f, 0xf4, 0xc4, 0xcc, 0x7a, 0xed, 0xf4, 0x10, 0x14, 0xe2, 0x78, 0x75, 0x14, 0x95,
	0x19, 0xa9, 0x1b, 0x70, 0x05, 0x72, 0x37, 0x33, 0x98, 0xd3, 0xa8, 0xdd, 0xba, 0x1e, 0xc4, 0x3f,
	0x1f, 0xf3, 0x13, 0x72, 0x5d, 0x50, 0x56, 0x88, 0x23, 0xc6, 0xe9, 0x11, 0x0b, 0x25, 0x27, 0x9e,
	0x6c, 0x52, 0x3f, 0x10, 0x92, 0x8f, 0x52, 0xd6, 0x47, 0xe0, 0xce, 0x8c, 0x1a, 0x4d, 0x5e, 0x02,
	0x6b, 0xa4, 0xd3, 0xe1, 0x54, 0x08, 0x1d, 0x44, 0xfa, 0xba, 0xfd, 0x71, 0x0d, 0x5c, 0x55, 0x78,
	0xf8, 0xd5, 0x02, 0x45, 0x63, 0x7a, 0x70, 0x77, 0x46, 0xf3, 0xb9, 0x2b, 0x6f, 0xef, 0x2d, 0x89,
	0x4a, 0x2c, 0xba, 0xfb, 0xef, 0x7e, 0xfc, 0xfe, 0xb0, 0x5a, 0x87, 0x08, 0xc7, 0xf0, 0xda, 0xe5,
	0xf9, 0xd5, 0xd2, 0xf3, 0x33, 0xcf, 0x02, 0xbf, 0x89, 0x67, 0xf9, 0x16, 0x7e, 0xb1, 0xc0, 0xba,
	0xb9, 0x74, 0x70, 0x39, 0x07, 0xe9, 0x7c, 0xec, 0xfd, 0x65, 0x61, 0xda, 0x79, 0x5d, 0x39, 0xdf,
	0x82, 0xd5, 0x05, 0x9d, 0x0b, 0xf8, 0xd9, 0x02, 0x37, 0xa7, 0xb7, 0x00, 0xee, 0xcc, 0x93, 0xce,
	0x58, 0x6d, 0x7b, 0x77, 0x39, 0x90, 0x76, 0xbb, 0xa7, 0xdc, 0x62, 0x58, 0xcb, 0x75, 0x4b, 0x35,
	0xac, 0x15, 0xff, 0x9a, 0xc6, 0xfc, 0xc9, 0x02, 0x45, 0x63, 0x71, 0xe1, 0x52, 0xf2, 0x62, 0xe1,
	0xed, 0xc8, 0xbc, 0x0e, 0x17, 0x2b, 0xd7, 0xf7, 0x61, 0x65, 0x31, 0xd7, 0x02, 0x7e, 0xb7, 0xc0,
	0xad, 0xac, 0x93, 0x80, 0x87, 0xf3, 0x0c, 0xcc, 0x38, 0x36, 0xfb, 0xe1, 0xff, 0x81, 0x75, 0x13,
	0x07, 0xaa, 0x89, 0x06, 0xc4, 0xb9, 0x4d, 0x78, 0x8c, 0xd3, 0x96, 0xa7, 0xf1, 0x2d, 0xae, 0x09,
	0x1e, 0x9f, 0x7e, 0x1b, 0x3b, 0xd6, 0xc5, 0xd8, 0xb1, 0x7e, 0x8d, 0x1d, 0xeb, 0xfd, 0xc4, 0x59,
	0xb9, 0x98, 0x38, 0x2b, 0x3f, 0x27, 0xce, 0xca, 0xcb, 0x03, 0x3f, 0x90, 0xdd, 0x41, 0x1b, 0x79,
	0xac, 0xaf, 0x48, 0xd5, 0x5f, 0x92, 0xc7, 0x7a, 0xd3, 0x0a, 0xe7, 0xa6, 0x86, 0x1c, 0x45, 0x54,
	0xb4, 0xaf, 0xa9, 0xca, 0x9d, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x71, 0xda, 0xbe, 0xb0, 0x78,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// OracleProgram returns an oracle program given its hash.
	OracleProgram(ctx context.Context, in *QueryOracleProgramRequest, opts ...grpc.CallOption) (*QueryOracleProgramResponse, error)
	// OraclePrograms returns all oracle programs.
	OraclePrograms(ctx context.Context, in *QueryOracleProgramsRequest, opts ...grpc.CallOption) (*QueryOracleProgramsResponse, error)
	// ExecutorWasm returns an executor wasm given its hash.
	ExecutorWasm(ctx context.Context, in *QueryExecutorWasmRequest, opts ...grpc.CallOption) (*QueryExecutorWasmResponse, error)
	// ExecutorWasms returns all executor wasms.
	ExecutorWasms(ctx context.Context, in *QueryExecutorWasmsRequest, opts ...grpc.CallOption) (*QueryExecutorWasmsResponse, error)
	// CoreContractRegistry returns the Core Contract Registry address.
	CoreContractRegistry(ctx context.Context, in *QueryCoreContractRegistryRequest, opts ...grpc.CallOption) (*QueryCoreContractRegistryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) OracleProgram(ctx context.Context, in *QueryOracleProgramRequest, opts ...grpc.CallOption) (*QueryOracleProgramResponse, error) {
	out := new(QueryOracleProgramResponse)
	err := c.cc.Invoke(ctx, "/sedachain.wasm_storage.v1.Query/OracleProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OraclePrograms(ctx context.Context, in *QueryOracleProgramsRequest, opts ...grpc.CallOption) (*QueryOracleProgramsResponse, error) {
	out := new(QueryOracleProgramsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.wasm_storage.v1.Query/OraclePrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutorWasm(ctx context.Context, in *QueryExecutorWasmRequest, opts ...grpc.CallOption) (*QueryExecutorWasmResponse, error) {
	out := new(QueryExecutorWasmResponse)
	err := c.cc.Invoke(ctx, "/sedachain.wasm_storage.v1.Query/ExecutorWasm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutorWasms(ctx context.Context, in *QueryExecutorWasmsRequest, opts ...grpc.CallOption) (*QueryExecutorWasmsResponse, error) {
	out := new(QueryExecutorWasmsResponse)
	err := c.cc.Invoke(ctx, "/sedachain.wasm_storage.v1.Query/ExecutorWasms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoreContractRegistry(ctx context.Context, in *QueryCoreContractRegistryRequest, opts ...grpc.CallOption) (*QueryCoreContractRegistryResponse, error) {
	out := new(QueryCoreContractRegistryResponse)
	err := c.cc.Invoke(ctx, "/sedachain.wasm_storage.v1.Query/CoreContractRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// OracleProgram returns an oracle program given its hash.
	OracleProgram(context.Context, *QueryOracleProgramRequest) (*QueryOracleProgramResponse, error)
	// OraclePrograms returns all oracle programs.
	OraclePrograms(context.Context, *QueryOracleProgramsRequest) (*QueryOracleProgramsResponse, error)
	// ExecutorWasm returns an executor wasm given its hash.
	ExecutorWasm(context.Context, *QueryExecutorWasmRequest) (*QueryExecutorWasmResponse, error)
	// ExecutorWasms returns all executor wasms.
	ExecutorWasms(context.Context, *QueryExecutorWasmsRequest) (*QueryExecutorWasmsResponse, error)
	// CoreContractRegistry returns the Core Contract Registry address.
	CoreContractRegistry(context.Context, *QueryCoreContractRegistryRequest) (*QueryCoreContractRegistryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) OracleProgram(ctx context.Context, req *QueryOracleProgramRequest) (*QueryOracleProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleProgram not implemented")
}
func (*UnimplementedQueryServer) OraclePrograms(ctx context.Context, req *QueryOracleProgramsRequest) (*QueryOracleProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OraclePrograms not implemented")
}
func (*UnimplementedQueryServer) ExecutorWasm(ctx context.Context, req *QueryExecutorWasmRequest) (*QueryExecutorWasmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutorWasm not implemented")
}
func (*UnimplementedQueryServer) ExecutorWasms(ctx context.Context, req *QueryExecutorWasmsRequest) (*QueryExecutorWasmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutorWasms not implemented")
}
func (*UnimplementedQueryServer) CoreContractRegistry(ctx context.Context, req *QueryCoreContractRegistryRequest) (*QueryCoreContractRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoreContractRegistry not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_OracleProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.wasm_storage.v1.Query/OracleProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleProgram(ctx, req.(*QueryOracleProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OraclePrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OraclePrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.wasm_storage.v1.Query/OraclePrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OraclePrograms(ctx, req.(*QueryOracleProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutorWasm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExecutorWasmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutorWasm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.wasm_storage.v1.Query/ExecutorWasm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutorWasm(ctx, req.(*QueryExecutorWasmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutorWasms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExecutorWasmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutorWasms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.wasm_storage.v1.Query/ExecutorWasms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutorWasms(ctx, req.(*QueryExecutorWasmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoreContractRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCoreContractRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoreContractRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.wasm_storage.v1.Query/CoreContractRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoreContractRegistry(ctx, req.(*QueryCoreContractRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sedachain.wasm_storage.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OracleProgram",
			Handler:    _Query_OracleProgram_Handler,
		},
		{
			MethodName: "OraclePrograms",
			Handler:    _Query_OraclePrograms_Handler,
		},
		{
			MethodName: "ExecutorWasm",
			Handler:    _Query_ExecutorWasm_Handler,
		},
		{
			MethodName: "ExecutorWasms",
			Handler:    _Query_ExecutorWasms_Handler,
		},
		{
			MethodName: "CoreContractRegistry",
			Handler:    _Query_CoreContractRegistry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sedachain/wasm_storage/v1/query.proto",
}

func (m *QueryOracleProgramRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleProgramRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleProgramRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleProgram != nil {
		{
			size, err := m.OracleProgram.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleProgramsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleProgramsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleProgramsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecutorWasmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutorWasmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutorWasmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecutorWasmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutorWasmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutorWasmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wasm != nil {
		{
			size, err := m.Wasm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecutorWasmsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutorWasmsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutorWasmsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryExecutorWasmsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutorWasmsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutorWasmsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoreContractRegistryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoreContractRegistryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoreContractRegistryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCoreContractRegistryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoreContractRegistryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoreContractRegistryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOracleProgramRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleProgram != nil {
		l = m.OracleProgram.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleProgramsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExecutorWasmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExecutorWasmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wasm != nil {
		l = m.Wasm.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExecutorWasmsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryExecutorWasmsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCoreContractRegistryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCoreContractRegistryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOracleProgramRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleProgramRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleProgramRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleProgram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleProgram == nil {
				m.OracleProgram = &OracleProgram{}
			}
			if err := m.OracleProgram.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleProgramsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleProgramsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleProgramsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutorWasmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutorWasmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutorWasmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutorWasmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutorWasmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutorWasmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wasm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wasm == nil {
				m.Wasm = &ExecutorWasm{}
			}
			if err := m.Wasm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutorWasmsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutorWasmsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutorWasmsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutorWasmsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutorWasmsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutorWasmsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoreContractRegistryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoreContractRegistryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoreContractRegistryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoreContractRegistryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoreContractRegistryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoreContractRegistryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
