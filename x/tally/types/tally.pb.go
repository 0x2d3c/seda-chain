// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/tally/v1/tally.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the tally module.
type Params struct {
	// MaxTallyGasLimit is the maximum gas limit for a tally request.
	MaxTallyGasLimit uint64 `protobuf:"varint,1,opt,name=max_tally_gas_limit,json=maxTallyGasLimit,proto3" json:"max_tally_gas_limit,omitempty"`
	// FilterGasCostNone is the gas cost for a filter type none.
	FilterGasCostNone uint64 `protobuf:"varint,2,opt,name=filter_gas_cost_none,json=filterGasCostNone,proto3" json:"filter_gas_cost_none,omitempty"`
	// FilterGasCostMultiplierMode is the gas cost multiplier for a filter type
	// mode.
	FilterGasCostMultiplierMode uint64 `protobuf:"varint,3,opt,name=filter_gas_cost_multiplier_mode,json=filterGasCostMultiplierMode,proto3" json:"filter_gas_cost_multiplier_mode,omitempty"`
	// FilterGasCostMultiplierStdDev is the gas cost multiplier for a filter type
	// stddev.
	FilterGasCostMultiplierStdDev uint64 `protobuf:"varint,4,opt,name=filter_gas_cost_multiplier_std_dev,json=filterGasCostMultiplierStdDev,proto3" json:"filter_gas_cost_multiplier_std_dev,omitempty"`
	// GasCostCommitment is the gas cost for a commitment corresponding to an
	// expired data request.
	GasCostCommitment uint64 `protobuf:"varint,5,opt,name=gas_cost_commitment,json=gasCostCommitment,proto3" json:"gas_cost_commitment,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2917df8a6808d5e2, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxTallyGasLimit() uint64 {
	if m != nil {
		return m.MaxTallyGasLimit
	}
	return 0
}

func (m *Params) GetFilterGasCostNone() uint64 {
	if m != nil {
		return m.FilterGasCostNone
	}
	return 0
}

func (m *Params) GetFilterGasCostMultiplierMode() uint64 {
	if m != nil {
		return m.FilterGasCostMultiplierMode
	}
	return 0
}

func (m *Params) GetFilterGasCostMultiplierStdDev() uint64 {
	if m != nil {
		return m.FilterGasCostMultiplierStdDev
	}
	return 0
}

func (m *Params) GetGasCostCommitment() uint64 {
	if m != nil {
		return m.GasCostCommitment
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "sedachain.tally.v1.Params")
}

func init() { proto.RegisterFile("sedachain/tally/v1/tally.proto", fileDescriptor_2917df8a6808d5e2) }

var fileDescriptor_2917df8a6808d5e2 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0xd7, 0x39, 0x77, 0xc8, 0x49, 0x33, 0x0f, 0x05, 0x31, 0xca, 0x4e, 0x5e, 0xd6, 0x3a,
	0x7c, 0x03, 0x37, 0x18, 0x8a, 0x13, 0x51, 0x4f, 0x5e, 0x42, 0xd6, 0xc4, 0x2e, 0x90, 0x34, 0xa5,
	0xf9, 0x56, 0xba, 0xb7, 0xf0, 0x35, 0x7c, 0x13, 0x8f, 0x3b, 0x7a, 0x94, 0xf6, 0x45, 0xa4, 0x89,
	0x14, 0x14, 0xf4, 0x96, 0x7c, 0xbf, 0xff, 0xff, 0x0f, 0xdf, 0xf7, 0x47, 0xc4, 0x0a, 0xce, 0x92,
	0x35, 0x93, 0x59, 0x0c, 0x4c, 0xa9, 0x6d, 0x5c, 0x4e, 0xfd, 0x23, 0xca, 0x0b, 0x03, 0x06, 0xe3,
	0x8e, 0x47, 0x7e, 0x5c, 0x4e, 0xc7, 0x6f, 0x7d, 0x34, 0xbc, 0x67, 0x05, 0xd3, 0x16, 0x4f, 0xd0,
	0x48, 0xb3, 0x8a, 0x3a, 0x44, 0x53, 0x66, 0xa9, 0x92, 0x5a, 0x42, 0x18, 0x9c, 0x05, 0xe7, 0x83,
	0x87, 0x03, 0xcd, 0xaa, 0xa7, 0x96, 0x2c, 0x98, 0xbd, 0x6d, 0xe7, 0x38, 0x46, 0x47, 0x2f, 0x52,
	0x81, 0x28, 0x9c, 0x36, 0x31, 0x16, 0x68, 0x66, 0x32, 0x11, 0xf6, 0x9d, 0xfe, 0xd0, 0xb3, 0x05,
	0xb3, 0x33, 0x63, 0xe1, 0xce, 0x64, 0x02, 0xcf, 0xd1, 0xe9, 0x6f, 0x83, 0xde, 0x28, 0x90, 0xb9,
	0x92, 0xa2, 0xa0, 0xda, 0x70, 0x11, 0xee, 0x39, 0xef, 0xf1, 0x0f, 0xef, 0xb2, 0xd3, 0x2c, 0x0d,
	0x17, 0xf8, 0x1a, 0x8d, 0xff, 0x49, 0xb1, 0xc0, 0x29, 0x17, 0x65, 0x38, 0x70, 0x41, 0x27, 0x7f,
	0x04, 0x3d, 0x02, 0x9f, 0x8b, 0x12, 0x47, 0x68, 0xd4, 0x65, 0x24, 0x46, 0x6b, 0x09, 0x5a, 0x64,
	0x10, 0xee, 0xfb, 0x05, 0x52, 0xef, 0x9a, 0x75, 0xe0, 0xea, 0xe6, 0xbd, 0x26, 0xc1, 0xae, 0x26,
	0xc1, 0x67, 0x4d, 0x82, 0xd7, 0x86, 0xf4, 0x76, 0x0d, 0xe9, 0x7d, 0x34, 0xa4, 0xf7, 0x7c, 0x91,
	0x4a, 0x58, 0x6f, 0x56, 0x51, 0x62, 0x74, 0xdc, 0x1e, 0xd9, 0xdd, 0x3b, 0x31, 0xca, 0x7d, 0x26,
	0xbe, 0x92, 0xea, 0xbb, 0x14, 0xd8, 0xe6, 0xc2, 0xae, 0x86, 0x4e, 0x72, 0xf9, 0x15, 0x00, 0x00,
	0xff, 0xff, 0xf8, 0x80, 0x28, 0xaf, 0xb4, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasCostCommitment != 0 {
		i = encodeVarintTally(dAtA, i, uint64(m.GasCostCommitment))
		i--
		dAtA[i] = 0x28
	}
	if m.FilterGasCostMultiplierStdDev != 0 {
		i = encodeVarintTally(dAtA, i, uint64(m.FilterGasCostMultiplierStdDev))
		i--
		dAtA[i] = 0x20
	}
	if m.FilterGasCostMultiplierMode != 0 {
		i = encodeVarintTally(dAtA, i, uint64(m.FilterGasCostMultiplierMode))
		i--
		dAtA[i] = 0x18
	}
	if m.FilterGasCostNone != 0 {
		i = encodeVarintTally(dAtA, i, uint64(m.FilterGasCostNone))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxTallyGasLimit != 0 {
		i = encodeVarintTally(dAtA, i, uint64(m.MaxTallyGasLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTally(dAtA []byte, offset int, v uint64) int {
	offset -= sovTally(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxTallyGasLimit != 0 {
		n += 1 + sovTally(uint64(m.MaxTallyGasLimit))
	}
	if m.FilterGasCostNone != 0 {
		n += 1 + sovTally(uint64(m.FilterGasCostNone))
	}
	if m.FilterGasCostMultiplierMode != 0 {
		n += 1 + sovTally(uint64(m.FilterGasCostMultiplierMode))
	}
	if m.FilterGasCostMultiplierStdDev != 0 {
		n += 1 + sovTally(uint64(m.FilterGasCostMultiplierStdDev))
	}
	if m.GasCostCommitment != 0 {
		n += 1 + sovTally(uint64(m.GasCostCommitment))
	}
	return n
}

func sovTally(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTally(x uint64) (n int) {
	return sovTally(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTally
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTallyGasLimit", wireType)
			}
			m.MaxTallyGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTallyGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterGasCostNone", wireType)
			}
			m.FilterGasCostNone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterGasCostNone |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterGasCostMultiplierMode", wireType)
			}
			m.FilterGasCostMultiplierMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterGasCostMultiplierMode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterGasCostMultiplierStdDev", wireType)
			}
			m.FilterGasCostMultiplierStdDev = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterGasCostMultiplierStdDev |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasCostCommitment", wireType)
			}
			m.GasCostCommitment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasCostCommitment |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTally(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTally
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTally(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTally
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTally
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTally
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTally
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTally
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTally
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTally        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTally          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTally = fmt.Errorf("proto: unexpected end of group")
)
