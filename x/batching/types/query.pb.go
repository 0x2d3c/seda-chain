// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/batching/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The request message for QueryBatch RPC.
type QueryBatchRequest struct {
	BatchNumber uint64 `protobuf:"varint,1,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
}

func (m *QueryBatchRequest) Reset()         { *m = QueryBatchRequest{} }
func (m *QueryBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchRequest) ProtoMessage()    {}
func (*QueryBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{0}
}
func (m *QueryBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchRequest.Merge(m, src)
}
func (m *QueryBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchRequest proto.InternalMessageInfo

func (m *QueryBatchRequest) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

// The response message for QueryBatch RPC.
type QueryBatchResponse struct {
	Batch Batch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch"`
}

func (m *QueryBatchResponse) Reset()         { *m = QueryBatchResponse{} }
func (m *QueryBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchResponse) ProtoMessage()    {}
func (*QueryBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{1}
}
func (m *QueryBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchResponse.Merge(m, src)
}
func (m *QueryBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchResponse proto.InternalMessageInfo

func (m *QueryBatchResponse) GetBatch() Batch {
	if m != nil {
		return m.Batch
	}
	return Batch{}
}

// The request message for BatchForHeight RPC.
type QueryBatchForHeightRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryBatchForHeightRequest) Reset()         { *m = QueryBatchForHeightRequest{} }
func (m *QueryBatchForHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchForHeightRequest) ProtoMessage()    {}
func (*QueryBatchForHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{2}
}
func (m *QueryBatchForHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchForHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchForHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchForHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchForHeightRequest.Merge(m, src)
}
func (m *QueryBatchForHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchForHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchForHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchForHeightRequest proto.InternalMessageInfo

func (m *QueryBatchForHeightRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// The response message for BatchForHeight RPC.
type QueryBatchForHeightResponse struct {
	Batch Batch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch"`
}

func (m *QueryBatchForHeightResponse) Reset()         { *m = QueryBatchForHeightResponse{} }
func (m *QueryBatchForHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchForHeightResponse) ProtoMessage()    {}
func (*QueryBatchForHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{3}
}
func (m *QueryBatchForHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchForHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchForHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchForHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchForHeightResponse.Merge(m, src)
}
func (m *QueryBatchForHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchForHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchForHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchForHeightResponse proto.InternalMessageInfo

func (m *QueryBatchForHeightResponse) GetBatch() Batch {
	if m != nil {
		return m.Batch
	}
	return Batch{}
}

// The request message for QueryBatches RPC.
type QueryBatchesRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBatchesRequest) Reset()         { *m = QueryBatchesRequest{} }
func (m *QueryBatchesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchesRequest) ProtoMessage()    {}
func (*QueryBatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{4}
}
func (m *QueryBatchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchesRequest.Merge(m, src)
}
func (m *QueryBatchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchesRequest proto.InternalMessageInfo

func (m *QueryBatchesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The response message for QueryBatches RPC.
type QueryBatchesResponse struct {
	Batches    []Batch             `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBatchesResponse) Reset()         { *m = QueryBatchesResponse{} }
func (m *QueryBatchesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchesResponse) ProtoMessage()    {}
func (*QueryBatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{5}
}
func (m *QueryBatchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchesResponse.Merge(m, src)
}
func (m *QueryBatchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchesResponse proto.InternalMessageInfo

func (m *QueryBatchesResponse) GetBatches() []Batch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func (m *QueryBatchesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The request message for QueryTreeEntries RPC.
type QueryTreeEntriesRequest struct {
	BatchNumber uint64 `protobuf:"varint,1,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
}

func (m *QueryTreeEntriesRequest) Reset()         { *m = QueryTreeEntriesRequest{} }
func (m *QueryTreeEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTreeEntriesRequest) ProtoMessage()    {}
func (*QueryTreeEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{6}
}
func (m *QueryTreeEntriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTreeEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTreeEntriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTreeEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTreeEntriesRequest.Merge(m, src)
}
func (m *QueryTreeEntriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTreeEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTreeEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTreeEntriesRequest proto.InternalMessageInfo

func (m *QueryTreeEntriesRequest) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

// The response message for QueryTreeEntries RPC.
type QueryTreeEntriesResponse struct {
	Entries TreeEntries `protobuf:"bytes,1,opt,name=entries,proto3" json:"entries"`
}

func (m *QueryTreeEntriesResponse) Reset()         { *m = QueryTreeEntriesResponse{} }
func (m *QueryTreeEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTreeEntriesResponse) ProtoMessage()    {}
func (*QueryTreeEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{7}
}
func (m *QueryTreeEntriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTreeEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTreeEntriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTreeEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTreeEntriesResponse.Merge(m, src)
}
func (m *QueryTreeEntriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTreeEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTreeEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTreeEntriesResponse proto.InternalMessageInfo

func (m *QueryTreeEntriesResponse) GetEntries() TreeEntries {
	if m != nil {
		return m.Entries
	}
	return TreeEntries{}
}

// The request message for QueryBatchSignaturesRequest RPC.
type QueryBatchSignaturesRequest struct {
	BatchNumber uint64 `protobuf:"varint,1,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
}

func (m *QueryBatchSignaturesRequest) Reset()         { *m = QueryBatchSignaturesRequest{} }
func (m *QueryBatchSignaturesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchSignaturesRequest) ProtoMessage()    {}
func (*QueryBatchSignaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{8}
}
func (m *QueryBatchSignaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchSignaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchSignaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchSignaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchSignaturesRequest.Merge(m, src)
}
func (m *QueryBatchSignaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchSignaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchSignaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchSignaturesRequest proto.InternalMessageInfo

func (m *QueryBatchSignaturesRequest) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

// The response message for QueryQueryBatchSignatures RPC.
type QueryBatchSignaturesResponse struct {
	BatchSigs []BatchSignatures `protobuf:"bytes,1,rep,name=batch_sigs,json=batchSigs,proto3" json:"batch_sigs"`
}

func (m *QueryBatchSignaturesResponse) Reset()         { *m = QueryBatchSignaturesResponse{} }
func (m *QueryBatchSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchSignaturesResponse) ProtoMessage()    {}
func (*QueryBatchSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{9}
}
func (m *QueryBatchSignaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchSignaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchSignaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchSignaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchSignaturesResponse.Merge(m, src)
}
func (m *QueryBatchSignaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchSignaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchSignaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchSignaturesResponse proto.InternalMessageInfo

func (m *QueryBatchSignaturesResponse) GetBatchSigs() []BatchSignatures {
	if m != nil {
		return m.BatchSigs
	}
	return nil
}

// The request message for QueryDataResult RPC.
type QueryDataResultRequest struct {
	DataRequestId string `protobuf:"bytes,1,opt,name=data_request_id,json=dataRequestId,proto3" json:"data_request_id,omitempty"`
}

func (m *QueryDataResultRequest) Reset()         { *m = QueryDataResultRequest{} }
func (m *QueryDataResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataResultRequest) ProtoMessage()    {}
func (*QueryDataResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{10}
}
func (m *QueryDataResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataResultRequest.Merge(m, src)
}
func (m *QueryDataResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataResultRequest proto.InternalMessageInfo

func (m *QueryDataResultRequest) GetDataRequestId() string {
	if m != nil {
		return m.DataRequestId
	}
	return ""
}

// The response message for QueryDataResult RPC.
type QueryDataResultResponse struct {
	DataResult *DataResult `protobuf:"bytes,1,opt,name=data_result,json=dataResult,proto3" json:"data_result,omitempty"`
}

func (m *QueryDataResultResponse) Reset()         { *m = QueryDataResultResponse{} }
func (m *QueryDataResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataResultResponse) ProtoMessage()    {}
func (*QueryDataResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{11}
}
func (m *QueryDataResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataResultResponse.Merge(m, src)
}
func (m *QueryDataResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataResultResponse proto.InternalMessageInfo

func (m *QueryDataResultResponse) GetDataResult() *DataResult {
	if m != nil {
		return m.DataResult
	}
	return nil
}

// The request message for QueryBatchAssignment RPC.
type QueryBatchAssignmentRequest struct {
	DataRequestId string `protobuf:"bytes,1,opt,name=data_request_id,json=dataRequestId,proto3" json:"data_request_id,omitempty"`
}

func (m *QueryBatchAssignmentRequest) Reset()         { *m = QueryBatchAssignmentRequest{} }
func (m *QueryBatchAssignmentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchAssignmentRequest) ProtoMessage()    {}
func (*QueryBatchAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{12}
}
func (m *QueryBatchAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchAssignmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchAssignmentRequest.Merge(m, src)
}
func (m *QueryBatchAssignmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchAssignmentRequest proto.InternalMessageInfo

func (m *QueryBatchAssignmentRequest) GetDataRequestId() string {
	if m != nil {
		return m.DataRequestId
	}
	return ""
}

// The response message for QueryBatchAssignment RPC.
type QueryBatchAssignmentResponse struct {
	BatchNumber uint64 `protobuf:"varint,1,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
}

func (m *QueryBatchAssignmentResponse) Reset()         { *m = QueryBatchAssignmentResponse{} }
func (m *QueryBatchAssignmentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchAssignmentResponse) ProtoMessage()    {}
func (*QueryBatchAssignmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_351236f6b51194e8, []int{13}
}
func (m *QueryBatchAssignmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchAssignmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchAssignmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchAssignmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchAssignmentResponse.Merge(m, src)
}
func (m *QueryBatchAssignmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchAssignmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchAssignmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchAssignmentResponse proto.InternalMessageInfo

func (m *QueryBatchAssignmentResponse) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryBatchRequest)(nil), "sedachain.batching.v1.QueryBatchRequest")
	proto.RegisterType((*QueryBatchResponse)(nil), "sedachain.batching.v1.QueryBatchResponse")
	proto.RegisterType((*QueryBatchForHeightRequest)(nil), "sedachain.batching.v1.QueryBatchForHeightRequest")
	proto.RegisterType((*QueryBatchForHeightResponse)(nil), "sedachain.batching.v1.QueryBatchForHeightResponse")
	proto.RegisterType((*QueryBatchesRequest)(nil), "sedachain.batching.v1.QueryBatchesRequest")
	proto.RegisterType((*QueryBatchesResponse)(nil), "sedachain.batching.v1.QueryBatchesResponse")
	proto.RegisterType((*QueryTreeEntriesRequest)(nil), "sedachain.batching.v1.QueryTreeEntriesRequest")
	proto.RegisterType((*QueryTreeEntriesResponse)(nil), "sedachain.batching.v1.QueryTreeEntriesResponse")
	proto.RegisterType((*QueryBatchSignaturesRequest)(nil), "sedachain.batching.v1.QueryBatchSignaturesRequest")
	proto.RegisterType((*QueryBatchSignaturesResponse)(nil), "sedachain.batching.v1.QueryBatchSignaturesResponse")
	proto.RegisterType((*QueryDataResultRequest)(nil), "sedachain.batching.v1.QueryDataResultRequest")
	proto.RegisterType((*QueryDataResultResponse)(nil), "sedachain.batching.v1.QueryDataResultResponse")
	proto.RegisterType((*QueryBatchAssignmentRequest)(nil), "sedachain.batching.v1.QueryBatchAssignmentRequest")
	proto.RegisterType((*QueryBatchAssignmentResponse)(nil), "sedachain.batching.v1.QueryBatchAssignmentResponse")
}

func init() { proto.RegisterFile("sedachain/batching/v1/query.proto", fileDescriptor_351236f6b51194e8) }

var fileDescriptor_351236f6b51194e8 = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xcd, 0x6b, 0x13, 0x5b,
	0x18, 0xc6, 0x33, 0xfd, 0xb8, 0xa5, 0x27, 0xf7, 0xde, 0x72, 0xcf, 0xed, 0xbd, 0xb7, 0xcc, 0x0d,
	0xb1, 0x1d, 0x4a, 0xed, 0x07, 0x9d, 0x31, 0x69, 0xa9, 0x55, 0x0a, 0xb5, 0xc1, 0xd6, 0x8a, 0x58,
	0x74, 0x14, 0x04, 0x41, 0xc3, 0x99, 0xe4, 0x38, 0x19, 0x9a, 0xcc, 0x49, 0xe7, 0x4c, 0x8a, 0xa5,
	0x74, 0xe3, 0xca, 0x9d, 0x82, 0x6b, 0xd7, 0x8a, 0x7b, 0x41, 0xf0, 0x1f, 0xe8, 0xb2, 0xe0, 0xc6,
	0x95, 0x48, 0xeb, 0x1f, 0x22, 0x79, 0xe7, 0x24, 0x73, 0x92, 0xc9, 0xc7, 0x04, 0x77, 0xd3, 0xb7,
	0xef, 0xf3, 0x9c, 0xdf, 0x79, 0xdf, 0x99, 0x87, 0xa0, 0x19, 0x4e, 0x8b, 0xa4, 0x50, 0x22, 0x8e,
	0x6b, 0x58, 0xc4, 0x2f, 0x94, 0x1c, 0xd7, 0x36, 0x0e, 0x33, 0xc6, 0x41, 0x8d, 0x7a, 0x47, 0x7a,
	0xd5, 0x63, 0x3e, 0xc3, 0xff, 0x34, 0x5b, 0xf4, 0x46, 0x8b, 0x7e, 0x98, 0x51, 0x27, 0x6d, 0x66,
	0x33, 0xe8, 0x30, 0xea, 0x4f, 0x41, 0xb3, 0x9a, 0xb2, 0x19, 0xb3, 0xcb, 0xd4, 0x20, 0x55, 0xc7,
	0x20, 0xae, 0xcb, 0x7c, 0xe2, 0x3b, 0xcc, 0xe5, 0xe2, 0xbf, 0x8b, 0x05, 0xc6, 0x2b, 0x8c, 0x1b,
	0x16, 0xe1, 0x34, 0x38, 0xc3, 0x38, 0xcc, 0x58, 0xd4, 0x27, 0x19, 0xa3, 0x4a, 0x6c, 0xc7, 0x85,
	0x66, 0xd1, 0x3b, 0xdb, 0x99, 0xac, 0x89, 0x00, 0x5d, 0xda, 0x1a, 0xfa, 0xeb, 0x7e, 0xdd, 0x27,
	0x57, 0x2f, 0x9b, 0xf4, 0xa0, 0x46, 0xb9, 0x8f, 0x67, 0xd0, 0xef, 0xd0, 0x96, 0x77, 0x6b, 0x15,
	0x8b, 0x7a, 0x53, 0xca, 0xb4, 0x32, 0x3f, 0x62, 0x26, 0xa1, 0xb6, 0x07, 0x25, 0x6d, 0x0f, 0x61,
	0x59, 0xc7, 0xab, 0xcc, 0xe5, 0x14, 0xaf, 0xa3, 0x51, 0x68, 0x02, 0x45, 0x32, 0x9b, 0xd2, 0x3b,
	0x5e, 0x5d, 0x07, 0x51, 0x6e, 0xe4, 0xf4, 0xdb, 0xa5, 0x84, 0x19, 0x08, 0xb4, 0x4d, 0xa4, 0x86,
	0x7e, 0x3b, 0xcc, 0xdb, 0xa5, 0x8e, 0x5d, 0xf2, 0x65, 0xa0, 0x32, 0x2b, 0xec, 0xe7, 0x4b, 0x50,
	0x06, 0xfb, 0x61, 0x33, 0x09, 0xb5, 0xa0, 0x53, 0x7b, 0x84, 0xfe, 0xef, 0x68, 0xf0, 0xcb, 0x64,
	0x4f, 0xd0, 0xdf, 0xa1, 0x31, 0xe5, 0x0d, 0xa4, 0x1d, 0x84, 0xc2, 0x91, 0x0b, 0xd7, 0x39, 0x3d,
	0xd8, 0x8f, 0x5e, 0xdf, 0x8f, 0x1e, 0xbc, 0x03, 0x62, 0x3f, 0xfa, 0x3d, 0x62, 0x53, 0xa1, 0x35,
	0x25, 0xa5, 0xf6, 0x56, 0x41, 0x93, 0xad, 0xfe, 0x82, 0x78, 0x03, 0x8d, 0x59, 0x41, 0x69, 0x4a,
	0x99, 0x1e, 0x8e, 0xc9, 0xdc, 0x90, 0xe0, 0x5b, 0x2d, 0x78, 0x43, 0x80, 0x77, 0xb9, 0x2f, 0x5e,
	0x70, 0x74, 0x0b, 0xdf, 0x06, 0xfa, 0x0f, 0xf0, 0x1e, 0x7a, 0x94, 0x6e, 0xbb, 0xbe, 0xe7, 0x84,
	0x23, 0x88, 0xf1, 0x9a, 0x3c, 0x45, 0x53, 0x51, 0xb5, 0xb8, 0x60, 0x0e, 0x8d, 0xd1, 0xa0, 0x24,
	0xc6, 0xa7, 0x75, 0xb9, 0xa0, 0x24, 0x6e, 0x5c, 0x53, 0x08, 0xb5, 0x1b, 0xf2, 0xd6, 0x1f, 0x38,
	0xb6, 0x4b, 0xfc, 0x9a, 0x37, 0x10, 0xe1, 0x3e, 0x4a, 0x75, 0x76, 0x10, 0x94, 0x77, 0x10, 0x0a,
	0x2c, 0xb8, 0x63, 0x37, 0x36, 0x31, 0xd7, 0x6b, 0x13, 0xa1, 0x87, 0x80, 0x1d, 0xb7, 0x44, 0xb9,
	0x8e, 0xfb, 0x2f, 0x1c, 0x76, 0x93, 0xf8, 0xc4, 0xa4, 0xbc, 0x56, 0x6e, 0xbe, 0xe1, 0x73, 0x68,
	0xa2, 0x48, 0x7c, 0x92, 0xf7, 0x82, 0xbf, 0xf3, 0x4e, 0x11, 0x60, 0xc7, 0xcd, 0x3f, 0x8a, 0xd0,
	0x0b, 0xd5, 0xdb, 0x45, 0xad, 0x20, 0xd6, 0x21, 0x3b, 0x08, 0xd2, 0x5d, 0x94, 0x14, 0x16, 0xf5,
	0xb2, 0x98, 0xe9, 0x4c, 0x17, 0xd4, 0x50, 0x0f, 0x94, 0x8a, 0x89, 0x8a, 0xcd, 0x8a, 0xb6, 0x2d,
	0x4f, 0x75, 0x8b, 0x73, 0xc7, 0x76, 0x2b, 0xd4, 0x1d, 0x98, 0x75, 0x4b, 0x1e, 0xad, 0x6c, 0x23,
	0x80, 0xfb, 0x6f, 0x27, 0xfb, 0x61, 0x1c, 0x8d, 0x82, 0x07, 0x7e, 0xa5, 0xa0, 0x51, 0x30, 0xc2,
	0xf3, 0x5d, 0xae, 0x14, 0xc9, 0x31, 0x75, 0x21, 0x46, 0x67, 0xc0, 0xa2, 0x65, 0x5e, 0x7c, 0xf9,
	0xf1, 0x66, 0x68, 0x09, 0x2f, 0x18, 0x75, 0xc9, 0x72, 0x5b, 0x6e, 0xc2, 0x83, 0x71, 0x2c, 0xd3,
	0x9e, 0xe0, 0x8f, 0x0a, 0xfa, 0xb3, 0x35, 0x6d, 0x70, 0xa6, 0xef, 0x81, 0xed, 0xd1, 0xa6, 0x66,
	0x07, 0x91, 0x08, 0xd8, 0x0d, 0x80, 0x5d, 0xc3, 0xab, 0xdd, 0x61, 0xf3, 0xcf, 0x98, 0x27, 0xd2,
	0xd2, 0x38, 0x96, 0xb3, 0xf3, 0x04, 0xbf, 0x54, 0xd0, 0x98, 0x08, 0x1b, 0xbc, 0xd8, 0xf7, 0xf4,
	0xe6, 0xc7, 0xa4, 0x2e, 0xc5, 0xea, 0x15, 0x88, 0xb3, 0x80, 0x98, 0xc6, 0xa9, 0xee, 0x88, 0x94,
	0xe3, 0xf7, 0x0a, 0x4a, 0x4a, 0x5f, 0x37, 0xd6, 0x7b, 0x1d, 0x11, 0x4d, 0x20, 0xd5, 0x88, 0xdd,
	0x2f, 0xb0, 0xd6, 0x01, 0x2b, 0x8b, 0xaf, 0x74, 0xc4, 0xf2, 0x3d, 0x4a, 0xf3, 0x22, 0x5a, 0xda,
	0xb7, 0xfd, 0x49, 0x41, 0x13, 0x6d, 0xdf, 0x37, 0xee, 0xbf, 0xbb, 0x48, 0x24, 0xa9, 0x2b, 0x03,
	0x69, 0x06, 0x58, 0x38, 0x6f, 0xca, 0xda, 0xd1, 0xdf, 0x29, 0x08, 0x85, 0xdf, 0x3b, 0x5e, 0xee,
	0x45, 0x10, 0x49, 0x26, 0x55, 0x8f, 0xdb, 0x2e, 0x58, 0xaf, 0x03, 0xeb, 0x2a, 0xce, 0x76, 0x64,
	0x95, 0x12, 0xca, 0x38, 0x6e, 0x4b, 0x91, 0x13, 0xfc, 0xb9, 0x31, 0xe4, 0x30, 0x2d, 0x62, 0x0c,
	0x39, 0x92, 0x50, 0x31, 0x86, 0x1c, 0x8d, 0x23, 0x6d, 0x13, 0xc0, 0xaf, 0xe1, 0xab, 0x3d, 0x86,
	0x4c, 0x9a, 0xb2, 0x28, 0x7d, 0xee, 0xee, 0xe9, 0x79, 0x5a, 0x39, 0x3b, 0x4f, 0x2b, 0xdf, 0xcf,
	0xd3, 0xca, 0xeb, 0x8b, 0x74, 0xe2, 0xec, 0x22, 0x9d, 0xf8, 0x7a, 0x91, 0x4e, 0x3c, 0x5e, 0xb1,
	0x1d, 0xbf, 0x54, 0xb3, 0xf4, 0x02, 0xab, 0x80, 0x39, 0xfc, 0xf6, 0x2a, 0xb0, 0xb2, 0x7c, 0xd2,
	0x73, 0xe9, 0x3d, 0x3c, 0xaa, 0x52, 0x6e, 0xfd, 0x06, 0x5d, 0x2b, 0x3f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xac, 0x9a, 0xc3, 0x78, 0x63, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Batch returns a batch given the batch number.
	Batch(ctx context.Context, in *QueryBatchRequest, opts ...grpc.CallOption) (*QueryBatchResponse, error)
	// BatchForHeight returns a batch created at a given block height.
	BatchForHeight(ctx context.Context, in *QueryBatchForHeightRequest, opts ...grpc.CallOption) (*QueryBatchForHeightResponse, error)
	// Batch returns all batches in the store.
	Batches(ctx context.Context, in *QueryBatchesRequest, opts ...grpc.CallOption) (*QueryBatchesResponse, error)
	// TreeEntries returns the tree entries from the given batch number.
	TreeEntries(ctx context.Context, in *QueryTreeEntriesRequest, opts ...grpc.CallOption) (*QueryTreeEntriesResponse, error)
	// BatchSignatures returns the batch signatures for the given batch
	// and the
	BatchSignatures(ctx context.Context, in *QueryBatchSignaturesRequest, opts ...grpc.CallOption) (*QueryBatchSignaturesResponse, error)
	// DataResult returns a data result given its associated data request's
	// ID.
	DataResult(ctx context.Context, in *QueryDataResultRequest, opts ...grpc.CallOption) (*QueryDataResultResponse, error)
	// BatchAssignment returns the batch number that a given data request
	// has been assigned to.
	BatchAssignment(ctx context.Context, in *QueryBatchAssignmentRequest, opts ...grpc.CallOption) (*QueryBatchAssignmentResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Batch(ctx context.Context, in *QueryBatchRequest, opts ...grpc.CallOption) (*QueryBatchResponse, error) {
	out := new(QueryBatchResponse)
	err := c.cc.Invoke(ctx, "/sedachain.batching.v1.Query/Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchForHeight(ctx context.Context, in *QueryBatchForHeightRequest, opts ...grpc.CallOption) (*QueryBatchForHeightResponse, error) {
	out := new(QueryBatchForHeightResponse)
	err := c.cc.Invoke(ctx, "/sedachain.batching.v1.Query/BatchForHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Batches(ctx context.Context, in *QueryBatchesRequest, opts ...grpc.CallOption) (*QueryBatchesResponse, error) {
	out := new(QueryBatchesResponse)
	err := c.cc.Invoke(ctx, "/sedachain.batching.v1.Query/Batches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TreeEntries(ctx context.Context, in *QueryTreeEntriesRequest, opts ...grpc.CallOption) (*QueryTreeEntriesResponse, error) {
	out := new(QueryTreeEntriesResponse)
	err := c.cc.Invoke(ctx, "/sedachain.batching.v1.Query/TreeEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchSignatures(ctx context.Context, in *QueryBatchSignaturesRequest, opts ...grpc.CallOption) (*QueryBatchSignaturesResponse, error) {
	out := new(QueryBatchSignaturesResponse)
	err := c.cc.Invoke(ctx, "/sedachain.batching.v1.Query/BatchSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataResult(ctx context.Context, in *QueryDataResultRequest, opts ...grpc.CallOption) (*QueryDataResultResponse, error) {
	out := new(QueryDataResultResponse)
	err := c.cc.Invoke(ctx, "/sedachain.batching.v1.Query/DataResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchAssignment(ctx context.Context, in *QueryBatchAssignmentRequest, opts ...grpc.CallOption) (*QueryBatchAssignmentResponse, error) {
	out := new(QueryBatchAssignmentResponse)
	err := c.cc.Invoke(ctx, "/sedachain.batching.v1.Query/BatchAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Batch returns a batch given the batch number.
	Batch(context.Context, *QueryBatchRequest) (*QueryBatchResponse, error)
	// BatchForHeight returns a batch created at a given block height.
	BatchForHeight(context.Context, *QueryBatchForHeightRequest) (*QueryBatchForHeightResponse, error)
	// Batch returns all batches in the store.
	Batches(context.Context, *QueryBatchesRequest) (*QueryBatchesResponse, error)
	// TreeEntries returns the tree entries from the given batch number.
	TreeEntries(context.Context, *QueryTreeEntriesRequest) (*QueryTreeEntriesResponse, error)
	// BatchSignatures returns the batch signatures for the given batch
	// and the
	BatchSignatures(context.Context, *QueryBatchSignaturesRequest) (*QueryBatchSignaturesResponse, error)
	// DataResult returns a data result given its associated data request's
	// ID.
	DataResult(context.Context, *QueryDataResultRequest) (*QueryDataResultResponse, error)
	// BatchAssignment returns the batch number that a given data request
	// has been assigned to.
	BatchAssignment(context.Context, *QueryBatchAssignmentRequest) (*QueryBatchAssignmentResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Batch(ctx context.Context, req *QueryBatchRequest) (*QueryBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (*UnimplementedQueryServer) BatchForHeight(ctx context.Context, req *QueryBatchForHeightRequest) (*QueryBatchForHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchForHeight not implemented")
}
func (*UnimplementedQueryServer) Batches(ctx context.Context, req *QueryBatchesRequest) (*QueryBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batches not implemented")
}
func (*UnimplementedQueryServer) TreeEntries(ctx context.Context, req *QueryTreeEntriesRequest) (*QueryTreeEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TreeEntries not implemented")
}
func (*UnimplementedQueryServer) BatchSignatures(ctx context.Context, req *QueryBatchSignaturesRequest) (*QueryBatchSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSignatures not implemented")
}
func (*UnimplementedQueryServer) DataResult(ctx context.Context, req *QueryDataResultRequest) (*QueryDataResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataResult not implemented")
}
func (*UnimplementedQueryServer) BatchAssignment(ctx context.Context, req *QueryBatchAssignmentRequest) (*QueryBatchAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAssignment not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.batching.v1.Query/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Batch(ctx, req.(*QueryBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchForHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchForHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchForHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.batching.v1.Query/BatchForHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchForHeight(ctx, req.(*QueryBatchForHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Batches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Batches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.batching.v1.Query/Batches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Batches(ctx, req.(*QueryBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TreeEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTreeEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TreeEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.batching.v1.Query/TreeEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TreeEntries(ctx, req.(*QueryTreeEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.batching.v1.Query/BatchSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchSignatures(ctx, req.(*QueryBatchSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.batching.v1.Query/DataResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataResult(ctx, req.(*QueryDataResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sedachain.batching.v1.Query/BatchAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchAssignment(ctx, req.(*QueryBatchAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sedachain.batching.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Batch",
			Handler:    _Query_Batch_Handler,
		},
		{
			MethodName: "BatchForHeight",
			Handler:    _Query_BatchForHeight_Handler,
		},
		{
			MethodName: "Batches",
			Handler:    _Query_Batches_Handler,
		},
		{
			MethodName: "TreeEntries",
			Handler:    _Query_TreeEntries_Handler,
		},
		{
			MethodName: "BatchSignatures",
			Handler:    _Query_BatchSignatures_Handler,
		},
		{
			MethodName: "DataResult",
			Handler:    _Query_DataResult_Handler,
		},
		{
			MethodName: "BatchAssignment",
			Handler:    _Query_BatchAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sedachain/batching/v1/query.proto",
}

func (m *QueryBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBatchForHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchForHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchForHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchForHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchForHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchForHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBatchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTreeEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTreeEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTreeEntriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTreeEntriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTreeEntriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTreeEntriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Entries.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBatchSignaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchSignaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchSignaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchSignaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchSignaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchSignaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchSigs) > 0 {
		for iNdEx := len(m.BatchSigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchSigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataRequestId) > 0 {
		i -= len(m.DataRequestId)
		copy(dAtA[i:], m.DataRequestId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DataRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataResult != nil {
		{
			size, err := m.DataResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchAssignmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchAssignmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchAssignmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataRequestId) > 0 {
		i -= len(m.DataRequestId)
		copy(dAtA[i:], m.DataRequestId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DataRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchAssignmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchAssignmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchAssignmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovQuery(uint64(m.BatchNumber))
	}
	return n
}

func (m *QueryBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Batch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBatchForHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryBatchForHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Batch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBatchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTreeEntriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovQuery(uint64(m.BatchNumber))
	}
	return n
}

func (m *QueryTreeEntriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Entries.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBatchSignaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovQuery(uint64(m.BatchNumber))
	}
	return n
}

func (m *QueryBatchSignaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BatchSigs) > 0 {
		for _, e := range m.BatchSigs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDataResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataRequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataResult != nil {
		l = m.DataResult.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchAssignmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataRequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchAssignmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovQuery(uint64(m.BatchNumber))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchForHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchForHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchForHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchForHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchForHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchForHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, Batch{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTreeEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTreeEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTreeEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTreeEntriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTreeEntriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTreeEntriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchSignaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchSignaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchSignaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchSignaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchSignaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchSignaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchSigs = append(m.BatchSigs, BatchSignatures{})
			if err := m.BatchSigs[len(m.BatchSigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataResult == nil {
				m.DataResult = &DataResult{}
			}
			if err := m.DataResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchAssignmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchAssignmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchAssignmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchAssignmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchAssignmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchAssignmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
