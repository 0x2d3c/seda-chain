// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/batching/v1/batching.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Batch is an aggregation of data request results along with validator
// signatures used to prove these results on destination chains.
type Batch struct {
	// batch_number is a unique identifier of the batch incremented
	// every time a batch is created.
	BatchNumber uint64 `protobuf:"varint,1,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	// block_height is the height at which the batch was created.
	BlockHeight int64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// current_data_result_root is the hex-encoded root of the data result
	// merkle tree.
	CurrentDataResultRoot string `protobuf:"bytes,3,opt,name=current_data_result_root,json=currentDataResultRoot,proto3" json:"current_data_result_root,omitempty"`
	// data_result_root is the hex-encoded "super root" of the previous
	// data result and current data result roots.
	DataResultRoot string `protobuf:"bytes,4,opt,name=data_result_root,json=dataResultRoot,proto3" json:"data_result_root,omitempty"`
	// validator_root is the hex-encoded root of the validator merkle
	// tree.
	ValidatorRoot string `protobuf:"bytes,5,opt,name=validator_root,json=validatorRoot,proto3" json:"validator_root,omitempty"`
	// batch_id is the Keccack-256 hash of the batch content.
	BatchId []byte `protobuf:"bytes,6,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// proving_metadata is a field for additional proving data.
	ProvingMetadata []byte `protobuf:"bytes,7,opt,name=proving_metadata,json=provingMetadata,proto3" json:"proving_metadata,omitempty"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{0}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return m.Size()
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *Batch) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Batch) GetCurrentDataResultRoot() string {
	if m != nil {
		return m.CurrentDataResultRoot
	}
	return ""
}

func (m *Batch) GetDataResultRoot() string {
	if m != nil {
		return m.DataResultRoot
	}
	return ""
}

func (m *Batch) GetValidatorRoot() string {
	if m != nil {
		return m.ValidatorRoot
	}
	return ""
}

func (m *Batch) GetBatchId() []byte {
	if m != nil {
		return m.BatchId
	}
	return nil
}

func (m *Batch) GetProvingMetadata() []byte {
	if m != nil {
		return m.ProvingMetadata
	}
	return nil
}

// DataResultTreeEntries is a list of data result tree entries for a
// given batch.
type DataResultTreeEntries struct {
	Entries [][]byte `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *DataResultTreeEntries) Reset()         { *m = DataResultTreeEntries{} }
func (m *DataResultTreeEntries) String() string { return proto.CompactTextString(m) }
func (*DataResultTreeEntries) ProtoMessage()    {}
func (*DataResultTreeEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{1}
}
func (m *DataResultTreeEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataResultTreeEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataResultTreeEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataResultTreeEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataResultTreeEntries.Merge(m, src)
}
func (m *DataResultTreeEntries) XXX_Size() int {
	return m.Size()
}
func (m *DataResultTreeEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_DataResultTreeEntries.DiscardUnknown(m)
}

var xxx_messageInfo_DataResultTreeEntries proto.InternalMessageInfo

func (m *DataResultTreeEntries) GetEntries() [][]byte {
	if m != nil {
		return m.Entries
	}
	return nil
}

// ValidatorTreeEntry is an entry in the validator tree.
type ValidatorTreeEntry struct {
	ValidatorAddress   []byte         `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	VotingPowerPercent uint32         `protobuf:"varint,2,opt,name=voting_power_percent,json=votingPowerPercent,proto3" json:"voting_power_percent,omitempty"`
	Secp256K1          Secp256K1Entry `protobuf:"bytes,3,opt,name=secp256k1,proto3" json:"secp256k1"`
}

func (m *ValidatorTreeEntry) Reset()         { *m = ValidatorTreeEntry{} }
func (m *ValidatorTreeEntry) String() string { return proto.CompactTextString(m) }
func (*ValidatorTreeEntry) ProtoMessage()    {}
func (*ValidatorTreeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{2}
}
func (m *ValidatorTreeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorTreeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorTreeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorTreeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorTreeEntry.Merge(m, src)
}
func (m *ValidatorTreeEntry) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorTreeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorTreeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorTreeEntry proto.InternalMessageInfo

func (m *ValidatorTreeEntry) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *ValidatorTreeEntry) GetVotingPowerPercent() uint32 {
	if m != nil {
		return m.VotingPowerPercent
	}
	return 0
}

func (m *ValidatorTreeEntry) GetSecp256K1() Secp256K1Entry {
	if m != nil {
		return m.Secp256K1
	}
	return Secp256K1Entry{}
}

// Secp256k1Entry is the secp256k1 signature component of a validator
// tree entry.
type Secp256K1Entry struct {
	EthAddress []byte `protobuf:"bytes,1,opt,name=eth_address,json=ethAddress,proto3" json:"eth_address,omitempty"`
	Signature  []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Secp256K1Entry) Reset()         { *m = Secp256K1Entry{} }
func (m *Secp256K1Entry) String() string { return proto.CompactTextString(m) }
func (*Secp256K1Entry) ProtoMessage()    {}
func (*Secp256K1Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{3}
}
func (m *Secp256K1Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Secp256K1Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Secp256K1Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Secp256K1Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secp256K1Entry.Merge(m, src)
}
func (m *Secp256K1Entry) XXX_Size() int {
	return m.Size()
}
func (m *Secp256K1Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Secp256K1Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Secp256K1Entry proto.InternalMessageInfo

func (m *Secp256K1Entry) GetEthAddress() []byte {
	if m != nil {
		return m.EthAddress
	}
	return nil
}

func (m *Secp256K1Entry) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// BatchSignatures contains basic validator data and its batch signatures
// under various cryptographic schemes.
type BatchSignatures struct {
	// batch_number is the identifier of the batch.
	BatchNumber   uint64 `protobuf:"varint,1,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	ValidatorAddr string `protobuf:"bytes,2,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	Signatures    []byte `protobuf:"bytes,3,opt,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *BatchSignatures) Reset()         { *m = BatchSignatures{} }
func (m *BatchSignatures) String() string { return proto.CompactTextString(m) }
func (*BatchSignatures) ProtoMessage()    {}
func (*BatchSignatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{4}
}
func (m *BatchSignatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchSignatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchSignatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchSignatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSignatures.Merge(m, src)
}
func (m *BatchSignatures) XXX_Size() int {
	return m.Size()
}
func (m *BatchSignatures) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSignatures.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSignatures proto.InternalMessageInfo

func (m *BatchSignatures) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *BatchSignatures) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

func (m *BatchSignatures) GetSignatures() []byte {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// Params is a list of parameters which can be changed through governance.
type Params struct {
	// validator_set_trim_percent is the percentage of the validator
	// set to store in the validator merkle tree in the batch.
	ValidatorSetTrimPercent uint32 `protobuf:"varint,1,opt,name=validator_set_trim_percent,json=validatorSetTrimPercent,proto3" json:"validator_set_trim_percent,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{5}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetValidatorSetTrimPercent() uint32 {
	if m != nil {
		return m.ValidatorSetTrimPercent
	}
	return 0
}

// DataResult represents the result of a resolved data request.
type DataResult struct {
	// id is the Keccack-256 hash of the data result.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// dr_id is the data request identifier.
	DrId string `protobuf:"bytes,2,opt,name=dr_id,json=drId,proto3" json:"dr_id"`
	// dr_block_height is the height at which the data request was submitted.
	DrBlockHeight uint64 `protobuf:"varint,3,opt,name=dr_block_height,json=drBlockHeight,proto3" json:"dr_block_height"`
	// version is a semantic version string.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version"`
	// block_height is the height at which the data request was tallied.
	BlockHeight uint64 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height"`
	// block_timestamp is the unix timestamp in seconds of when the data request was tallied.
	BlockTimestamp uint64 `protobuf:"varint,6,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp"`
	// exit_code is the exit code of the tally wasm binary execution.
	ExitCode uint32 `protobuf:"varint,7,opt,name=exit_code,json=exitCode,proto3" json:"exit_code"`
	// gas_used is the gas used by the data request execution.
	GasUsed uint64 `protobuf:"varint,8,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used"`
	// result is the result of the tally wasm binary execution.
	Result []byte `protobuf:"bytes,9,opt,name=result,proto3" json:"result"`
	// payback_address is the payback address set by the relayer.
	PaybackAddress string `protobuf:"bytes,10,opt,name=payback_address,json=paybackAddress,proto3" json:"payback_address"`
	// seda_payload is the payload set by SEDA Protocol (e.g. OEV-enabled
	// data requests)
	SedaPayload string `protobuf:"bytes,11,opt,name=seda_payload,json=sedaPayload,proto3" json:"seda_payload"`
	// consensus indicates whether consensus was reached in the tally
	// process.
	Consensus bool `protobuf:"varint,12,opt,name=consensus,proto3" json:"consensus"`
}

func (m *DataResult) Reset()         { *m = DataResult{} }
func (m *DataResult) String() string { return proto.CompactTextString(m) }
func (*DataResult) ProtoMessage()    {}
func (*DataResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{6}
}
func (m *DataResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataResult.Merge(m, src)
}
func (m *DataResult) XXX_Size() int {
	return m.Size()
}
func (m *DataResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DataResult.DiscardUnknown(m)
}

var xxx_messageInfo_DataResult proto.InternalMessageInfo

func (m *DataResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DataResult) GetDrId() string {
	if m != nil {
		return m.DrId
	}
	return ""
}

func (m *DataResult) GetDrBlockHeight() uint64 {
	if m != nil {
		return m.DrBlockHeight
	}
	return 0
}

func (m *DataResult) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DataResult) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *DataResult) GetBlockTimestamp() uint64 {
	if m != nil {
		return m.BlockTimestamp
	}
	return 0
}

func (m *DataResult) GetExitCode() uint32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *DataResult) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *DataResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DataResult) GetPaybackAddress() string {
	if m != nil {
		return m.PaybackAddress
	}
	return ""
}

func (m *DataResult) GetSedaPayload() string {
	if m != nil {
		return m.SedaPayload
	}
	return ""
}

func (m *DataResult) GetConsensus() bool {
	if m != nil {
		return m.Consensus
	}
	return false
}

func init() {
	proto.RegisterType((*Batch)(nil), "sedachain.batching.v1.Batch")
	proto.RegisterType((*DataResultTreeEntries)(nil), "sedachain.batching.v1.DataResultTreeEntries")
	proto.RegisterType((*ValidatorTreeEntry)(nil), "sedachain.batching.v1.ValidatorTreeEntry")
	proto.RegisterType((*Secp256K1Entry)(nil), "sedachain.batching.v1.Secp256k1Entry")
	proto.RegisterType((*BatchSignatures)(nil), "sedachain.batching.v1.BatchSignatures")
	proto.RegisterType((*Params)(nil), "sedachain.batching.v1.Params")
	proto.RegisterType((*DataResult)(nil), "sedachain.batching.v1.DataResult")
}

func init() {
	proto.RegisterFile("sedachain/batching/v1/batching.proto", fileDescriptor_5b2a028024867de2)
}

var fileDescriptor_5b2a028024867de2 = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xce, 0x38, 0x8e, 0x7f, 0xca, 0x3f, 0x09, 0xcd, 0x06, 0x66, 0x23, 0xf0, 0x78, 0x2d, 0x22,
	0x0c, 0xab, 0x75, 0xc8, 0x46, 0x80, 0xc4, 0x72, 0x61, 0x00, 0x69, 0x23, 0xb4, 0x10, 0x75, 0xc2,
	0x1e, 0xb8, 0x8c, 0xda, 0xd3, 0xad, 0x71, 0x2b, 0xf6, 0xb4, 0xd5, 0xdd, 0x36, 0x9b, 0xb7, 0xe0,
	0x05, 0x40, 0x3c, 0xc4, 0x9e, 0x39, 0xef, 0x71, 0xc5, 0x89, 0xd3, 0x08, 0x25, 0x17, 0xe4, 0xa7,
	0x40, 0xd3, 0x3d, 0x3f, 0xb6, 0xe1, 0xb0, 0x27, 0x77, 0x7d, 0xdf, 0x57, 0xd5, 0xdf, 0xd4, 0x54,
	0x79, 0xe0, 0x03, 0xc5, 0x28, 0x09, 0x27, 0x84, 0xc7, 0x27, 0x63, 0xa2, 0xc3, 0x09, 0x8f, 0xa3,
	0x93, 0xe5, 0x69, 0x71, 0x1e, 0xcd, 0xa5, 0xd0, 0x02, 0x1d, 0x16, 0xaa, 0x51, 0xc1, 0x2c, 0x4f,
	0x8f, 0xee, 0x45, 0x22, 0x12, 0x46, 0x71, 0x92, 0x9e, 0xac, 0xf8, 0xe8, 0x7e, 0x28, 0xd4, 0x4c,
	0xa8, 0xc0, 0x12, 0x36, 0xb0, 0xd4, 0xe0, 0xd7, 0x0a, 0xec, 0xf9, 0x69, 0x01, 0xf4, 0x00, 0xda,
	0xa6, 0x52, 0x10, 0x2f, 0x66, 0x63, 0x26, 0x5d, 0xa7, 0xef, 0x0c, 0xab, 0xb8, 0x65, 0xb0, 0xef,
	0x0d, 0x64, 0x24, 0x53, 0x11, 0x5e, 0x07, 0x13, 0xc6, 0xa3, 0x89, 0x76, 0x2b, 0x7d, 0x67, 0xb8,
	0x8b, 0x5b, 0x06, 0x7b, 0x6a, 0x20, 0xf4, 0x39, 0xb8, 0xe1, 0x42, 0x4a, 0x16, 0xeb, 0x80, 0x12,
	0x4d, 0x02, 0xc9, 0xd4, 0x62, 0xaa, 0x03, 0x29, 0x84, 0x76, 0x77, 0xfb, 0xce, 0xb0, 0x89, 0x0f,
	0x33, 0xfe, 0x1b, 0xa2, 0x09, 0x36, 0x2c, 0x16, 0x42, 0xa3, 0x21, 0x1c, 0xfc, 0x27, 0xa1, 0x6a,
	0x12, 0xba, 0x74, 0x53, 0x79, 0x0c, 0xdd, 0x25, 0x99, 0x72, 0x4a, 0xb4, 0x90, 0x56, 0xb7, 0x67,
	0x74, 0x9d, 0x02, 0x35, 0xb2, 0xfb, 0xd0, 0xb0, 0xcf, 0xc3, 0xa9, 0x5b, 0xeb, 0x3b, 0xc3, 0x36,
	0xae, 0x9b, 0xf8, 0x9c, 0xa2, 0x8f, 0xe0, 0x60, 0x2e, 0xc5, 0x92, 0xc7, 0x51, 0x30, 0x63, 0x9a,
	0xa4, 0xf5, 0xdd, 0xba, 0x91, 0xec, 0x67, 0xf8, 0xb3, 0x0c, 0x1e, 0x9c, 0xc2, 0x61, 0x69, 0xf4,
	0x4a, 0x32, 0xf6, 0x6d, 0xac, 0x25, 0x67, 0x0a, 0xb9, 0x50, 0x67, 0xf6, 0xe8, 0x3a, 0xfd, 0xdd,
	0xb4, 0x7a, 0x16, 0x0e, 0xfe, 0x70, 0x00, 0x3d, 0xcf, 0xad, 0xe4, 0x29, 0x37, 0xe8, 0x21, 0xbc,
	0x55, 0xda, 0x26, 0x94, 0x4a, 0xa6, 0x94, 0x69, 0x72, 0x1b, 0x1f, 0x14, 0xc4, 0x57, 0x16, 0x47,
	0x9f, 0xc0, 0xbd, 0xa5, 0xd0, 0xa9, 0xc1, 0xb9, 0xf8, 0x99, 0xc9, 0x60, 0xce, 0x64, 0xc8, 0x62,
	0xdb, 0xf1, 0x0e, 0x46, 0x96, 0xbb, 0x48, 0xa9, 0x0b, 0xcb, 0xa0, 0x73, 0x68, 0x2a, 0x16, 0xce,
	0x1f, 0x7f, 0xfa, 0xd9, 0xf5, 0xa9, 0xe9, 0x74, 0xeb, 0xf1, 0xf1, 0xe8, 0x7f, 0x87, 0x64, 0x74,
	0x99, 0xeb, 0x8c, 0x31, 0xbf, 0xfa, 0x2a, 0xf1, 0x76, 0x70, 0x99, 0x3d, 0xf8, 0x01, 0xba, 0x9b,
	0x12, 0xe4, 0x41, 0x8b, 0xe9, 0xc9, 0x96, 0x6b, 0x60, 0x7a, 0x92, 0xfb, 0x7d, 0x0f, 0x9a, 0x8a,
	0x47, 0x31, 0xd1, 0x0b, 0xc9, 0x8c, 0xc9, 0x36, 0x2e, 0x81, 0xc1, 0x6f, 0x0e, 0xec, 0x9b, 0x21,
	0xbb, 0xcc, 0x21, 0xf5, 0x26, 0xe3, 0xf6, 0x74, 0xfd, 0x45, 0xa7, 0x77, 0x9b, 0xca, 0x4d, 0xff,
	0xc1, 0x9f, 0x2f, 0x1f, 0xbd, 0x9f, 0x4d, 0xf1, 0xf3, 0xad, 0xce, 0x5d, 0x6a, 0xc9, 0xe3, 0x68,
	0x6d, 0x16, 0x52, 0x1c, 0xf5, 0x00, 0x0a, 0x37, 0xca, 0x74, 0xa7, 0x8d, 0xd7, 0x90, 0xc1, 0x77,
	0x50, 0xbb, 0x20, 0x92, 0xcc, 0x14, 0x7a, 0x02, 0x47, 0xe5, 0x9d, 0x8a, 0xe9, 0x40, 0x4b, 0x3e,
	0x2b, 0xda, 0xef, 0x98, 0xf6, 0xbf, 0x5b, 0x28, 0x2e, 0x99, 0xbe, 0x92, 0x7c, 0x96, 0xbd, 0x83,
	0x2f, 0xaa, 0xff, 0xfc, 0xee, 0x39, 0x83, 0x97, 0x55, 0x80, 0x72, 0x66, 0xd0, 0x3b, 0x50, 0xe1,
	0xd4, 0x64, 0x36, 0xfd, 0xda, 0x2a, 0xf1, 0x2a, 0x9c, 0xe2, 0x0a, 0xa7, 0xa8, 0x07, 0x7b, 0x54,
	0xa6, 0xc3, 0x69, 0x1f, 0xaa, 0xb9, 0x4a, 0x3c, 0x0b, 0xe0, 0x2a, 0x95, 0xe7, 0x14, 0x3d, 0x81,
	0x7d, 0x2a, 0x83, 0x8d, 0x7d, 0x4b, 0x8d, 0x57, 0xfd, 0xb7, 0x57, 0x89, 0xb7, 0x4d, 0xe1, 0x0e,
	0x95, 0xfe, 0xda, 0x1a, 0x1e, 0x43, 0x7d, 0xc9, 0xa4, 0xe2, 0x22, 0xb6, 0x4b, 0xe4, 0xb7, 0x56,
	0x89, 0x97, 0x43, 0x38, 0x3f, 0xa0, 0xb3, 0xad, 0x85, 0xde, 0x33, 0x17, 0x1c, 0xac, 0x12, 0x6f,
	0x03, 0xdf, 0x5c, 0xf1, 0x2f, 0x61, 0xdf, 0x92, 0x9a, 0xcf, 0x98, 0xd2, 0x64, 0x36, 0x37, 0xfb,
	0x95, 0x19, 0xdb, 0xa2, 0x70, 0xd7, 0x00, 0x57, 0x79, 0x8c, 0x3e, 0x86, 0x26, 0x7b, 0xc1, 0x75,
	0x10, 0x0a, 0xca, 0xcc, 0xd2, 0x75, 0xfc, 0xce, 0x2a, 0xf1, 0x4a, 0x10, 0x37, 0xd2, 0xe3, 0xd7,
	0x82, 0x32, 0xf4, 0x21, 0x34, 0x22, 0xa2, 0x82, 0x85, 0x62, 0xd4, 0x6d, 0x98, 0x2b, 0xda, 0xab,
	0xc4, 0x2b, 0x30, 0x5c, 0x8f, 0x88, 0xfa, 0x51, 0x31, 0x8a, 0x06, 0x50, 0xb3, 0xff, 0x1b, 0x6e,
	0x33, 0x7d, 0xb7, 0x3e, 0xac, 0x12, 0x2f, 0x43, 0x70, 0xf6, 0x9b, 0xda, 0x9e, 0x93, 0x9b, 0x31,
	0x09, 0xaf, 0x8b, 0x39, 0x06, 0xd3, 0x1a, 0x63, 0x7b, 0x8b, 0xc2, 0xdd, 0x0c, 0xc8, 0x07, 0xfc,
	0x0c, 0xda, 0xe9, 0x32, 0x05, 0x73, 0x72, 0x33, 0x15, 0x84, 0xba, 0x2d, 0x93, 0x6a, 0x3a, 0xb5,
	0x8e, 0xe3, 0x56, 0x1a, 0x5d, 0xd8, 0x00, 0x3d, 0x84, 0x66, 0x28, 0x62, 0xc5, 0x62, 0xb5, 0x50,
	0x6e, 0xbb, 0xef, 0x0c, 0x1b, 0xf6, 0x59, 0x0b, 0x10, 0x97, 0x47, 0xff, 0xd9, 0xab, 0xdb, 0x9e,
	0xf3, 0xfa, 0xb6, 0xe7, 0xfc, 0x7d, 0xdb, 0x73, 0x7e, 0xb9, 0xeb, 0xed, 0xbc, 0xbe, 0xeb, 0xed,
	0xfc, 0x75, 0xd7, 0xdb, 0xf9, 0xe9, 0x2c, 0xe2, 0x7a, 0xb2, 0x18, 0x8f, 0x42, 0x31, 0x3b, 0x49,
	0xcb, 0x9b, 0x7f, 0xee, 0x50, 0x4c, 0x4d, 0xf0, 0xc8, 0x7e, 0x2a, 0x5e, 0x94, 0x1f, 0x0b, 0x7d,
	0x33, 0x67, 0x6a, 0x5c, 0x33, 0xaa, 0xb3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x27, 0x23,
	0xdb, 0x4f, 0x06, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ValidatorSetTrimPercent != that1.ValidatorSetTrimPercent {
		return false
	}
	return true
}
func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProvingMetadata) > 0 {
		i -= len(m.ProvingMetadata)
		copy(dAtA[i:], m.ProvingMetadata)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.ProvingMetadata)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BatchId) > 0 {
		i -= len(m.BatchId)
		copy(dAtA[i:], m.BatchId)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.BatchId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValidatorRoot) > 0 {
		i -= len(m.ValidatorRoot)
		copy(dAtA[i:], m.ValidatorRoot)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.ValidatorRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataResultRoot) > 0 {
		i -= len(m.DataResultRoot)
		copy(dAtA[i:], m.DataResultRoot)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.DataResultRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CurrentDataResultRoot) > 0 {
		i -= len(m.CurrentDataResultRoot)
		copy(dAtA[i:], m.CurrentDataResultRoot)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.CurrentDataResultRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchNumber != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataResultTreeEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataResultTreeEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataResultTreeEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Entries[iNdEx])
			copy(dAtA[i:], m.Entries[iNdEx])
			i = encodeVarintBatching(dAtA, i, uint64(len(m.Entries[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorTreeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorTreeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorTreeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Secp256K1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatching(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VotingPowerPercent != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.VotingPowerPercent))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Secp256K1Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Secp256K1Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Secp256K1Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EthAddress) > 0 {
		i -= len(m.EthAddress)
		copy(dAtA[i:], m.EthAddress)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.EthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchSignatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchSignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchSignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		i -= len(m.Signatures)
		copy(dAtA[i:], m.Signatures)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.Signatures)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.BatchNumber != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorSetTrimPercent != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.ValidatorSetTrimPercent))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Consensus {
		i--
		if m.Consensus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.SedaPayload) > 0 {
		i -= len(m.SedaPayload)
		copy(dAtA[i:], m.SedaPayload)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.SedaPayload)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PaybackAddress) > 0 {
		i -= len(m.PaybackAddress)
		copy(dAtA[i:], m.PaybackAddress)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.PaybackAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x4a
	}
	if m.GasUsed != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x40
	}
	if m.ExitCode != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockTimestamp != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.BlockTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if m.DrBlockHeight != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.DrBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DrId) > 0 {
		i -= len(m.DrId)
		copy(dAtA[i:], m.DrId)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.DrId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBatching(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatching(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Batch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovBatching(uint64(m.BatchNumber))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBatching(uint64(m.BlockHeight))
	}
	l = len(m.CurrentDataResultRoot)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.DataResultRoot)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.ValidatorRoot)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.BatchId)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.ProvingMetadata)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	return n
}

func (m *DataResultTreeEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, b := range m.Entries {
			l = len(b)
			n += 1 + l + sovBatching(uint64(l))
		}
	}
	return n
}

func (m *ValidatorTreeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	if m.VotingPowerPercent != 0 {
		n += 1 + sovBatching(uint64(m.VotingPowerPercent))
	}
	l = m.Secp256K1.Size()
	n += 1 + l + sovBatching(uint64(l))
	return n
}

func (m *Secp256K1Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthAddress)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	return n
}

func (m *BatchSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovBatching(uint64(m.BatchNumber))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.Signatures)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorSetTrimPercent != 0 {
		n += 1 + sovBatching(uint64(m.ValidatorSetTrimPercent))
	}
	return n
}

func (m *DataResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.DrId)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	if m.DrBlockHeight != 0 {
		n += 1 + sovBatching(uint64(m.DrBlockHeight))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBatching(uint64(m.BlockHeight))
	}
	if m.BlockTimestamp != 0 {
		n += 1 + sovBatching(uint64(m.BlockTimestamp))
	}
	if m.ExitCode != 0 {
		n += 1 + sovBatching(uint64(m.ExitCode))
	}
	if m.GasUsed != 0 {
		n += 1 + sovBatching(uint64(m.GasUsed))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.PaybackAddress)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.SedaPayload)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	if m.Consensus {
		n += 2
	}
	return n
}

func sovBatching(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBatching(x uint64) (n int) {
	return sovBatching(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDataResultRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentDataResultRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataResultRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataResultRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchId = append(m.BatchId[:0], dAtA[iNdEx:postIndex]...)
			if m.BatchId == nil {
				m.BatchId = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvingMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvingMetadata = append(m.ProvingMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.ProvingMetadata == nil {
				m.ProvingMetadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataResultTreeEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataResultTreeEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataResultTreeEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, make([]byte, postIndex-iNdEx))
			copy(m.Entries[len(m.Entries)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorTreeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorTreeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorTreeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = append(m.ValidatorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddress == nil {
				m.ValidatorAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPowerPercent", wireType)
			}
			m.VotingPowerPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPowerPercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secp256K1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Secp256K1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Secp256K1Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Secp256k1Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Secp256k1Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthAddress = append(m.EthAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EthAddress == nil {
				m.EthAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchSignatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchSignatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchSignatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures[:0], dAtA[iNdEx:postIndex]...)
			if m.Signatures == nil {
				m.Signatures = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetTrimPercent", wireType)
			}
			m.ValidatorSetTrimPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSetTrimPercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrBlockHeight", wireType)
			}
			m.DrBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimestamp", wireType)
			}
			m.BlockTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaybackAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaybackAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SedaPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SedaPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Consensus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatching(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatching
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBatching
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBatching
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBatching        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatching          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBatching = fmt.Errorf("proto: unexpected end of group")
)
