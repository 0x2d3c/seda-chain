// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/batching/v1/batching.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Batch is an aggregation of data request results along with validator
// signatures used to prove these results on destination chains.
type Batch struct {
	// batch_number is a unique identifier of the batch incremented
	// every time a batch is created.
	BatchNumber uint64 `protobuf:"varint,1,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
	// block_height is the height at which the batch was created.
	BlockHeight int64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// data_result_root is the hex-encoded root of the data result
	// merkle tree.
	DataResultRoot string `protobuf:"bytes,3,opt,name=data_result_root,json=dataResultRoot,proto3" json:"data_result_root,omitempty"`
	// validator_root is the hex-encoded root of the validator merkle
	// tree.
	ValidatorRoot string `protobuf:"bytes,4,opt,name=validator_root,json=validatorRoot,proto3" json:"validator_root,omitempty"`
	// batch_id is the Keccack-256 hash of the batch concatenated with
	// the previous batch ID.
	BatchId []byte `protobuf:"bytes,5,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// data_result_entries are the entries (unhashed leaf contents) of
	// the data result tree.
	DataResultEntries [][]byte `protobuf:"bytes,6,rep,name=data_result_entries,json=dataResultEntries,proto3" json:"data_result_entries,omitempty"`
	// validator_entries are the entries (unhashed leaf contents) of
	// the validator tree.
	ValidatorEntries [][]byte `protobuf:"bytes,7,rep,name=validator_entries,json=validatorEntries,proto3" json:"validator_entries,omitempty"`
	// block_time is the time at which the batch was created.
	BlockTime time.Time `protobuf:"bytes,8,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{0}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return m.Size()
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *Batch) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Batch) GetDataResultRoot() string {
	if m != nil {
		return m.DataResultRoot
	}
	return ""
}

func (m *Batch) GetValidatorRoot() string {
	if m != nil {
		return m.ValidatorRoot
	}
	return ""
}

func (m *Batch) GetBatchId() []byte {
	if m != nil {
		return m.BatchId
	}
	return nil
}

func (m *Batch) GetDataResultEntries() [][]byte {
	if m != nil {
		return m.DataResultEntries
	}
	return nil
}

func (m *Batch) GetValidatorEntries() [][]byte {
	if m != nil {
		return m.ValidatorEntries
	}
	return nil
}

func (m *Batch) GetBlockTime() time.Time {
	if m != nil {
		return m.BlockTime
	}
	return time.Time{}
}

// Vote contains basic validator data and its batch signatures under various
// cryptographic schemes.
type Vote struct {
	ValidatorAddr string       `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
	VotingPower   int64        `protobuf:"varint,2,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
	Signatures    []*Signature `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{1}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

func (m *Vote) GetVotingPower() int64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *Vote) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

// Signature is a batch signature under a given scheme.
type Signature struct {
	// scheme is the signature scheme that corresponds to index in x/pubkey.
	Scheme uint32 `protobuf:"varint,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// signature is the signature of the batch.
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// public_key is the public key corresponding to the signature that
	// should have been registered in x/pubkey
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// merkle_proof is the proof of inclusion of the signer in the validator
	// tree.
	MerkleProof string `protobuf:"bytes,4,opt,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{2}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetScheme() uint32 {
	if m != nil {
		return m.Scheme
	}
	return 0
}

func (m *Signature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Signature) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *Signature) GetMerkleProof() string {
	if m != nil {
		return m.MerkleProof
	}
	return ""
}

// Params is a list of parameters which can be changed through governance.
type Params struct {
	// validator_set_trim_percent is the percentage of the validator
	// set to store in the validator merkle tree in the batch.
	ValidatorSetTrimPercent uint32 `protobuf:"varint,1,opt,name=validator_set_trim_percent,json=validatorSetTrimPercent,proto3" json:"validator_set_trim_percent,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{3}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetValidatorSetTrimPercent() uint32 {
	if m != nil {
		return m.ValidatorSetTrimPercent
	}
	return 0
}

// DataResult represents the result of a resolved data request.
type DataResult struct {
	// id is the Keccack-256 hash of the data result.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// dr_id is the data request identifier.
	DrId string `protobuf:"bytes,2,opt,name=dr_id,json=drId,proto3" json:"dr_id,omitempty"`
	// version is a semantic version string.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// block_height is the height at which the data request was tallied.
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// exit_code is the exit code of the tally wasm binary execution.
	ExitCode uint32 `protobuf:"varint,5,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// gas_used is the gas used by the data request execution.
	GasUsed uint64 `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// result is the result of the tally wasm binary execution.
	Result []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	// payback_address is the payback address set by the relayer.
	PaybackAddress string `protobuf:"bytes,8,opt,name=payback_address,json=paybackAddress,proto3" json:"payback_address,omitempty"`
	// seda_payload is the payload set by SEDA Protocol (e.g. OEV-enabled
	// data requests)
	SedaPayload string `protobuf:"bytes,9,opt,name=seda_payload,json=sedaPayload,proto3" json:"seda_payload,omitempty"`
	// consensus indicates whether consensus was reached in the tally
	// process.
	Consensus bool `protobuf:"varint,10,opt,name=consensus,proto3" json:"consensus,omitempty"`
}

func (m *DataResult) Reset()         { *m = DataResult{} }
func (m *DataResult) String() string { return proto.CompactTextString(m) }
func (*DataResult) ProtoMessage()    {}
func (*DataResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2a028024867de2, []int{4}
}
func (m *DataResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataResult.Merge(m, src)
}
func (m *DataResult) XXX_Size() int {
	return m.Size()
}
func (m *DataResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DataResult.DiscardUnknown(m)
}

var xxx_messageInfo_DataResult proto.InternalMessageInfo

func (m *DataResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DataResult) GetDrId() string {
	if m != nil {
		return m.DrId
	}
	return ""
}

func (m *DataResult) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DataResult) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *DataResult) GetExitCode() uint32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *DataResult) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *DataResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *DataResult) GetPaybackAddress() string {
	if m != nil {
		return m.PaybackAddress
	}
	return ""
}

func (m *DataResult) GetSedaPayload() string {
	if m != nil {
		return m.SedaPayload
	}
	return ""
}

func (m *DataResult) GetConsensus() bool {
	if m != nil {
		return m.Consensus
	}
	return false
}

func init() {
	proto.RegisterType((*Batch)(nil), "sedachain.batching.v1.Batch")
	proto.RegisterType((*Vote)(nil), "sedachain.batching.v1.Vote")
	proto.RegisterType((*Signature)(nil), "sedachain.batching.v1.Signature")
	proto.RegisterType((*Params)(nil), "sedachain.batching.v1.Params")
	proto.RegisterType((*DataResult)(nil), "sedachain.batching.v1.DataResult")
}

func init() {
	proto.RegisterFile("sedachain/batching/v1/batching.proto", fileDescriptor_5b2a028024867de2)
}

var fileDescriptor_5b2a028024867de2 = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xcf, 0x6e, 0xeb, 0x44,
	0x14, 0xc6, 0xe3, 0x24, 0x4d, 0xe2, 0x49, 0x1b, 0xee, 0x9d, 0xcb, 0x1f, 0xdf, 0xc0, 0x4d, 0xdc,
	0x08, 0x84, 0x25, 0x54, 0x47, 0x6d, 0x77, 0xb0, 0x81, 0x14, 0xa4, 0x56, 0x15, 0x28, 0x72, 0x4b,
	0x17, 0x6c, 0xac, 0x89, 0x67, 0xea, 0x8c, 0x62, 0x7b, 0xac, 0x99, 0x71, 0x68, 0x1e, 0x81, 0x5d,
	0x1f, 0x81, 0x25, 0x0f, 0x00, 0xef, 0xd0, 0x65, 0xc5, 0x0a, 0x09, 0x09, 0x50, 0xbb, 0xe1, 0x31,
	0xd0, 0xcc, 0xd8, 0x4e, 0x24, 0xee, 0xce, 0xe7, 0x77, 0xbe, 0xf1, 0xcc, 0x39, 0xe7, 0x9b, 0x01,
	0x1f, 0x0b, 0x82, 0x51, 0xb4, 0x44, 0x34, 0x9b, 0x2e, 0x90, 0x8c, 0x96, 0x34, 0x8b, 0xa7, 0xeb,
	0xe3, 0xfa, 0xdb, 0xcf, 0x39, 0x93, 0x0c, 0xbe, 0x57, 0xab, 0xfc, 0x3a, 0xb3, 0x3e, 0x1e, 0xbe,
	0x1b, 0xb3, 0x98, 0x69, 0xc5, 0x54, 0x7d, 0x19, 0xf1, 0x70, 0x1c, 0x33, 0x16, 0x27, 0x64, 0xaa,
	0xa3, 0x45, 0x71, 0x3b, 0x95, 0x34, 0x25, 0x42, 0xa2, 0x34, 0x2f, 0x05, 0xaf, 0x23, 0x26, 0x52,
	0x26, 0x42, 0xb3, 0xd2, 0x04, 0x26, 0x35, 0xf9, 0xb3, 0x09, 0xf6, 0x66, 0x6a, 0x07, 0x78, 0x08,
	0xf6, 0xf5, 0x56, 0x61, 0x56, 0xa4, 0x0b, 0xc2, 0x1d, 0xcb, 0xb5, 0xbc, 0x76, 0xd0, 0xd7, 0xec,
	0x3b, 0x8d, 0xb4, 0x24, 0x61, 0xd1, 0x2a, 0x5c, 0x12, 0x1a, 0x2f, 0xa5, 0xd3, 0x74, 0x2d, 0xaf,
	0x15, 0xf4, 0x35, 0x3b, 0xd7, 0x08, 0x7a, 0xe0, 0x05, 0x46, 0x12, 0x85, 0x9c, 0x88, 0x22, 0x91,
	0x21, 0x67, 0x4c, 0x3a, 0x2d, 0xd7, 0xf2, 0xec, 0x60, 0xa0, 0x78, 0xa0, 0x71, 0xc0, 0x98, 0x84,
	0x9f, 0x80, 0xc1, 0x1a, 0x25, 0x14, 0x23, 0xc9, 0xb8, 0xd1, 0xb5, 0xb5, 0xee, 0xa0, 0xa6, 0x5a,
	0xf6, 0x1a, 0xf4, 0xcc, 0xb1, 0x28, 0x76, 0xf6, 0x5c, 0xcb, 0xdb, 0x0f, 0xba, 0x3a, 0xbe, 0xc0,
	0xd0, 0x07, 0xaf, 0x76, 0xf7, 0x22, 0x99, 0xe4, 0x94, 0x08, 0xa7, 0xe3, 0xb6, 0xbc, 0xfd, 0xe0,
	0xe5, 0x76, 0xbb, 0x6f, 0x4c, 0x02, 0x7e, 0x06, 0x5e, 0x6e, 0x77, 0xac, 0xd4, 0x5d, 0xad, 0x7e,
	0x51, 0x27, 0x2a, 0xf1, 0x19, 0x00, 0xa6, 0x56, 0xd5, 0x4c, 0xa7, 0xe7, 0x5a, 0x5e, 0xff, 0x64,
	0xe8, 0x9b, 0x4e, 0xfb, 0x55, 0xa7, 0xfd, 0xeb, 0xaa, 0xd3, 0xb3, 0xde, 0xc3, 0x5f, 0xe3, 0xc6,
	0xfd, 0xdf, 0x63, 0x2b, 0xb0, 0xf5, 0x3a, 0x95, 0x99, 0xfc, 0x66, 0x81, 0xf6, 0x0d, 0x93, 0x04,
	0x9e, 0xef, 0x16, 0x8b, 0x30, 0x36, 0xed, 0xb5, 0x67, 0x87, 0xbf, 0xff, 0x7a, 0xf4, 0xa6, 0x1c,
	0xc8, 0x4d, 0x25, 0xf8, 0x0a, 0x63, 0x4e, 0x84, 0xb8, 0x92, 0x9c, 0x66, 0xf1, 0x4e, 0x3f, 0x14,
	0x57, 0x33, 0x58, 0x33, 0x49, 0xb3, 0x38, 0xcc, 0xd9, 0x8f, 0x84, 0x57, 0x33, 0x30, 0x6c, 0xae,
	0x10, 0xfc, 0x12, 0x00, 0x41, 0xe3, 0x0c, 0xc9, 0x82, 0x13, 0xe1, 0xb4, 0xdc, 0x96, 0xd7, 0x3f,
	0x71, 0xfd, 0xb7, 0x3a, 0xca, 0xbf, 0xaa, 0x84, 0xc1, 0xce, 0x9a, 0xc9, 0x4f, 0x16, 0xb0, 0xeb,
	0x0c, 0x7c, 0x1f, 0x74, 0x44, 0xb4, 0x24, 0x29, 0xd1, 0x87, 0x3e, 0x08, 0xca, 0x08, 0x7e, 0x04,
	0xec, 0x7a, 0x8d, 0x3e, 0x87, 0x1d, 0x6c, 0x01, 0x7c, 0x03, 0x40, 0x5e, 0x2c, 0x12, 0x1a, 0x85,
	0x2b, 0xb2, 0x29, 0x3d, 0x60, 0x1b, 0x72, 0x49, 0x36, 0xaa, 0x8e, 0x94, 0xf0, 0x55, 0x42, 0x94,
	0x2b, 0xd9, 0x6d, 0x39, 0xfc, 0xbe, 0x61, 0x73, 0x85, 0x3e, 0x6f, 0xff, 0xfb, 0xf3, 0xd8, 0x9a,
	0x5c, 0x82, 0xce, 0x1c, 0x71, 0x94, 0x0a, 0xf8, 0x05, 0x18, 0x6e, 0x9b, 0x28, 0x88, 0x0c, 0x25,
	0xa7, 0x69, 0x98, 0x13, 0x1e, 0x91, 0x4c, 0x96, 0x67, 0xfb, 0xa0, 0x56, 0x5c, 0x11, 0x79, 0xcd,
	0x69, 0x3a, 0x37, 0xe9, 0xf2, 0x67, 0xbf, 0x34, 0x01, 0xf8, 0xba, 0x36, 0x06, 0x1c, 0x80, 0x26,
	0xc5, 0x66, 0x14, 0x41, 0x93, 0x62, 0xf8, 0x0a, 0xec, 0x61, 0xae, 0x9c, 0x66, 0xaa, 0x69, 0x63,
	0x7e, 0x81, 0xa1, 0x03, 0xba, 0x6b, 0xc2, 0x05, 0x65, 0x59, 0x59, 0x45, 0x15, 0xfe, 0xef, 0x3e,
	0xb4, 0xcb, 0x2b, 0xb3, 0x73, 0x1f, 0x3e, 0x04, 0x36, 0xb9, 0xa3, 0x32, 0x8c, 0x18, 0x26, 0xda,
	0xbf, 0x07, 0x41, 0x4f, 0x81, 0x33, 0x86, 0x89, 0xf2, 0x76, 0x8c, 0x44, 0x58, 0x08, 0x82, 0x9d,
	0x8e, 0x5e, 0xdb, 0x8d, 0x91, 0xf8, 0x5e, 0x10, 0xac, 0x7a, 0x6e, 0x6c, 0xed, 0x74, 0xb5, 0xe9,
	0xcb, 0x08, 0x7e, 0x0a, 0xde, 0xc9, 0xd1, 0x66, 0x81, 0xa2, 0x95, 0xb6, 0x11, 0x11, 0x42, 0x7b,
	0xd3, 0x0e, 0x06, 0x25, 0x2e, 0xcd, 0xa3, 0xce, 0xa6, 0x26, 0x1e, 0xe6, 0x68, 0x93, 0x30, 0x84,
	0x1d, 0xdb, 0xf4, 0x57, 0xb1, 0xb9, 0x41, 0x6a, 0x7e, 0x11, 0xcb, 0x04, 0xc9, 0x44, 0x21, 0x1c,
	0xe0, 0x5a, 0x5e, 0x2f, 0xd8, 0x82, 0xd9, 0xb7, 0x0f, 0x4f, 0x23, 0xeb, 0xf1, 0x69, 0x64, 0xfd,
	0xf3, 0x34, 0xb2, 0xee, 0x9f, 0x47, 0x8d, 0xc7, 0xe7, 0x51, 0xe3, 0x8f, 0xe7, 0x51, 0xe3, 0x87,
	0xd3, 0x98, 0xca, 0x65, 0xb1, 0xf0, 0x23, 0x96, 0x4e, 0xd5, 0xff, 0xf4, 0x6d, 0x88, 0x58, 0xa2,
	0x83, 0x23, 0xf3, 0xb6, 0xdd, 0x6d, 0x5f, 0x37, 0xb9, 0xc9, 0x89, 0x58, 0x74, 0xb4, 0xea, 0xf4,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xbd, 0xa8, 0x9d, 0x00, 0x05, 0x00, 0x00,
}

func (this *Signature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signature)
	if !ok {
		that2, ok := that.(Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Scheme != that1.Scheme {
		return false
	}
	if this.Signature != that1.Signature {
		return false
	}
	if this.PublicKey != that1.PublicKey {
		return false
	}
	if this.MerkleProof != that1.MerkleProof {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ValidatorSetTrimPercent != that1.ValidatorSetTrimPercent {
		return false
	}
	return true
}
func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.BlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BlockTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBatching(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	if len(m.ValidatorEntries) > 0 {
		for iNdEx := len(m.ValidatorEntries) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorEntries[iNdEx])
			copy(dAtA[i:], m.ValidatorEntries[iNdEx])
			i = encodeVarintBatching(dAtA, i, uint64(len(m.ValidatorEntries[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DataResultEntries) > 0 {
		for iNdEx := len(m.DataResultEntries) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataResultEntries[iNdEx])
			copy(dAtA[i:], m.DataResultEntries[iNdEx])
			i = encodeVarintBatching(dAtA, i, uint64(len(m.DataResultEntries[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BatchId) > 0 {
		i -= len(m.BatchId)
		copy(dAtA[i:], m.BatchId)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.BatchId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValidatorRoot) > 0 {
		i -= len(m.ValidatorRoot)
		copy(dAtA[i:], m.ValidatorRoot)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.ValidatorRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataResultRoot) > 0 {
		i -= len(m.DataResultRoot)
		copy(dAtA[i:], m.DataResultRoot)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.DataResultRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchNumber != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatching(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.VotingPower != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MerkleProof) > 0 {
		i -= len(m.MerkleProof)
		copy(dAtA[i:], m.MerkleProof)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.MerkleProof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Scheme != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.Scheme))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorSetTrimPercent != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.ValidatorSetTrimPercent))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Consensus {
		i--
		if m.Consensus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.SedaPayload) > 0 {
		i -= len(m.SedaPayload)
		copy(dAtA[i:], m.SedaPayload)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.SedaPayload)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PaybackAddress) > 0 {
		i -= len(m.PaybackAddress)
		copy(dAtA[i:], m.PaybackAddress)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.PaybackAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GasUsed != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x30
	}
	if m.ExitCode != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBatching(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DrId) > 0 {
		i -= len(m.DrId)
		copy(dAtA[i:], m.DrId)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.DrId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBatching(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBatching(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatching(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Batch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNumber != 0 {
		n += 1 + sovBatching(uint64(m.BatchNumber))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBatching(uint64(m.BlockHeight))
	}
	l = len(m.DataResultRoot)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.ValidatorRoot)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.BatchId)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	if len(m.DataResultEntries) > 0 {
		for _, b := range m.DataResultEntries {
			l = len(b)
			n += 1 + l + sovBatching(uint64(l))
		}
	}
	if len(m.ValidatorEntries) > 0 {
		for _, b := range m.ValidatorEntries {
			l = len(b)
			n += 1 + l + sovBatching(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BlockTime)
	n += 1 + l + sovBatching(uint64(l))
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	if m.VotingPower != 0 {
		n += 1 + sovBatching(uint64(m.VotingPower))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovBatching(uint64(l))
		}
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scheme != 0 {
		n += 1 + sovBatching(uint64(m.Scheme))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.MerkleProof)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorSetTrimPercent != 0 {
		n += 1 + sovBatching(uint64(m.ValidatorSetTrimPercent))
	}
	return n
}

func (m *DataResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.DrId)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBatching(uint64(m.BlockHeight))
	}
	if m.ExitCode != 0 {
		n += 1 + sovBatching(uint64(m.ExitCode))
	}
	if m.GasUsed != 0 {
		n += 1 + sovBatching(uint64(m.GasUsed))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.PaybackAddress)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	l = len(m.SedaPayload)
	if l > 0 {
		n += 1 + l + sovBatching(uint64(l))
	}
	if m.Consensus {
		n += 2
	}
	return n
}

func sovBatching(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBatching(x uint64) (n int) {
	return sovBatching(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataResultRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataResultRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchId = append(m.BatchId[:0], dAtA[iNdEx:postIndex]...)
			if m.BatchId == nil {
				m.BatchId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataResultEntries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataResultEntries = append(m.DataResultEntries, make([]byte, postIndex-iNdEx))
			copy(m.DataResultEntries[len(m.DataResultEntries)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorEntries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorEntries = append(m.ValidatorEntries, make([]byte, postIndex-iNdEx))
			copy(m.ValidatorEntries[len(m.ValidatorEntries)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			m.Scheme = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scheme |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleProof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleProof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetTrimPercent", wireType)
			}
			m.ValidatorSetTrimPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSetTrimPercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaybackAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaybackAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SedaPayload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatching
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatching
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SedaPayload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Consensus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBatching(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatching
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatching(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatching
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatching
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatching
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBatching
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBatching
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBatching        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatching          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBatching = fmt.Errorf("proto: unexpected end of group")
)
