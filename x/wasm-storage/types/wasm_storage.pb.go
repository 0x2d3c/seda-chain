// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sedachain/wasm_storage/wasm_storage.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WasmType int32

const (
	WasmTypeNil                 WasmType = 0
	WasmTypeDataRequest         WasmType = 1
	WasmTypeTally               WasmType = 2
	WasmTypeDataRequestExecutor WasmType = 3
	WasmTypeRelayer             WasmType = 4
)

var WasmType_name = map[int32]string{
	0: "WASM_TYPE_UNSPECIFIED",
	1: "WASM_TYPE_DATA_REQUEST",
	2: "WASM_TYPE_TALLY",
	3: "WASM_TYPE_DATA_REQUEST_EXECUTOR",
	4: "WASM_TYPE_RELAYER",
}

var WasmType_value = map[string]int32{
	"WASM_TYPE_UNSPECIFIED":           0,
	"WASM_TYPE_DATA_REQUEST":          1,
	"WASM_TYPE_TALLY":                 2,
	"WASM_TYPE_DATA_REQUEST_EXECUTOR": 3,
	"WASM_TYPE_RELAYER":               4,
}

func (x WasmType) String() string {
	return proto.EnumName(WasmType_name, int32(x))
}

func (WasmType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_741e09ee207d72f6, []int{0}
}

type Wasm struct {
	Hash     []byte    `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty" yaml:"hash"`
	Bytecode []byte    `protobuf:"bytes,2,opt,name=bytecode,proto3" json:"bytecode,omitempty" yaml:"bytecode"`
	WasmType WasmType  `protobuf:"varint,3,opt,name=wasmType,proto3,enum=sedachain.wasm_storage.WasmType" json:"wasmType,omitempty" yaml:"wasm_type"`
	AddedAt  time.Time `protobuf:"bytes,4,opt,name=added_at,json=addedAt,proto3,stdtime" json:"added_at" yaml:"added_at"`
}

func (m *Wasm) Reset()         { *m = Wasm{} }
func (m *Wasm) String() string { return proto.CompactTextString(m) }
func (*Wasm) ProtoMessage()    {}
func (*Wasm) Descriptor() ([]byte, []int) {
	return fileDescriptor_741e09ee207d72f6, []int{0}
}
func (m *Wasm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wasm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wasm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wasm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wasm.Merge(m, src)
}
func (m *Wasm) XXX_Size() int {
	return m.Size()
}
func (m *Wasm) XXX_DiscardUnknown() {
	xxx_messageInfo_Wasm.DiscardUnknown(m)
}

var xxx_messageInfo_Wasm proto.InternalMessageInfo

func (m *Wasm) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Wasm) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

func (m *Wasm) GetWasmType() WasmType {
	if m != nil {
		return m.WasmType
	}
	return WasmTypeNil
}

func (m *Wasm) GetAddedAt() time.Time {
	if m != nil {
		return m.AddedAt
	}
	return time.Time{}
}

type Params struct {
	MaxWasmSize uint64 `protobuf:"varint,1,opt,name=max_wasm_size,json=maxWasmSize,proto3" json:"max_wasm_size,omitempty" yaml:"max_wasm_size"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_741e09ee207d72f6, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxWasmSize() uint64 {
	if m != nil {
		return m.MaxWasmSize
	}
	return 0
}

func init() {
	proto.RegisterEnum("sedachain.wasm_storage.WasmType", WasmType_name, WasmType_value)
	proto.RegisterType((*Wasm)(nil), "sedachain.wasm_storage.Wasm")
	proto.RegisterType((*Params)(nil), "sedachain.wasm_storage.Params")
}

func init() {
	proto.RegisterFile("sedachain/wasm_storage/wasm_storage.proto", fileDescriptor_741e09ee207d72f6)
}

var fileDescriptor_741e09ee207d72f6 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xc1, 0x6e, 0xda, 0x4c,
	0x14, 0x85, 0x6d, 0x62, 0xe5, 0x47, 0xc3, 0x9f, 0xe2, 0x18, 0x9a, 0x22, 0x47, 0xb2, 0x2d, 0x57,
	0xaa, 0x28, 0x52, 0x6c, 0x29, 0x59, 0x54, 0xaa, 0xba, 0x31, 0xc1, 0x91, 0x22, 0xd1, 0x94, 0x18,
	0x23, 0x4a, 0x37, 0xd6, 0x00, 0x53, 0x63, 0xc9, 0xee, 0x50, 0x3c, 0xa8, 0x38, 0xeb, 0x2e, 0x2a,
	0xba, 0xc9, 0x0b, 0xb0, 0xea, 0xcb, 0x64, 0x99, 0x65, 0x57, 0xb4, 0x82, 0x37, 0xe0, 0x09, 0x2a,
	0x8f, 0x3b, 0xa1, 0x91, 0xd8, 0xf9, 0xfa, 0x7e, 0xf7, 0xf8, 0x1c, 0xcf, 0x1d, 0xf0, 0x32, 0x46,
	0x43, 0x38, 0x18, 0xc1, 0xe0, 0x93, 0xf9, 0x05, 0xc6, 0x91, 0x17, 0x13, 0x3c, 0x81, 0x3e, 0x7a,
	0x54, 0x18, 0xe3, 0x09, 0x26, 0x58, 0x3a, 0x7a, 0x40, 0x8d, 0x7f, 0xbb, 0x72, 0xd9, 0xc7, 0x3e,
	0xa6, 0x88, 0x99, 0x3e, 0x65, 0xb4, 0xac, 0xfa, 0x18, 0xfb, 0x21, 0x32, 0x69, 0xd5, 0x9f, 0x7e,
	0x34, 0x49, 0x10, 0xa1, 0x98, 0xc0, 0x68, 0x9c, 0x01, 0xfa, 0xd7, 0x1c, 0x10, 0xba, 0x30, 0x8e,
	0xa4, 0xe7, 0x40, 0x18, 0xc1, 0x78, 0x54, 0xe1, 0x35, 0xbe, 0xfa, 0x7f, 0xbd, 0xb8, 0x59, 0xaa,
	0x85, 0x04, 0x46, 0xe1, 0x6b, 0x3d, 0x7d, 0xab, 0x3b, 0xb4, 0x29, 0x99, 0x20, 0xdf, 0x4f, 0x08,
	0x1a, 0xe0, 0x21, 0xaa, 0xe4, 0x28, 0x58, 0xda, 0x2c, 0xd5, 0x62, 0x06, 0xb2, 0x8e, 0xee, 0x3c,
	0x40, 0x92, 0x03, 0xf2, 0xa9, 0x4b, 0x37, 0x19, 0xa3, 0xca, 0x9e, 0xc6, 0x57, 0x9f, 0x9c, 0x6a,
	0xc6, 0xee, 0x00, 0x46, 0xf7, 0x2f, 0x57, 0x2f, 0x6f, 0x96, 0xaa, 0x98, 0x49, 0x52, 0x80, 0x24,
	0xe3, 0x54, 0x93, 0xe9, 0xa4, 0x9a, 0x70, 0x38, 0x44, 0x43, 0x0f, 0x92, 0x8a, 0xa0, 0xf1, 0xd5,
	0xc2, 0xa9, 0x6c, 0x64, 0x31, 0x0d, 0x16, 0xd3, 0x70, 0x59, 0xcc, 0xfa, 0xf1, 0xdd, 0x52, 0xe5,
	0xb6, 0x26, 0xd9, 0xa4, 0x7e, 0xfb, 0x4b, 0xe5, 0x9d, 0xff, 0x68, 0x69, 0x11, 0xfd, 0x02, 0xec,
	0xb7, 0xe0, 0x04, 0x46, 0xb1, 0xf4, 0x06, 0x1c, 0x44, 0x70, 0xe6, 0x65, 0xd6, 0x82, 0x1b, 0x44,
	0x7f, 0x88, 0x50, 0xaf, 0x6c, 0x96, 0x6a, 0x39, 0x93, 0x78, 0xd4, 0xd6, 0x9d, 0x42, 0x04, 0x67,
	0xa9, 0xf7, 0x76, 0x70, 0x83, 0x6a, 0xdf, 0x73, 0x20, 0xcf, 0x82, 0x48, 0x35, 0xf0, 0xb4, 0x6b,
	0xb5, 0xdf, 0x7a, 0x6e, 0xaf, 0x65, 0x7b, 0x9d, 0xab, 0x76, 0xcb, 0x3e, 0xbf, 0xbc, 0xb8, 0xb4,
	0x1b, 0x22, 0x27, 0x17, 0xe7, 0x0b, 0xad, 0xc0, 0xc0, 0xab, 0x20, 0x94, 0xce, 0xc0, 0xd1, 0x96,
	0x6d, 0x58, 0xae, 0xe5, 0x39, 0xf6, 0x75, 0xc7, 0x6e, 0xbb, 0x22, 0x2f, 0x3f, 0x9b, 0x2f, 0xb4,
	0x12, 0x83, 0x1b, 0x90, 0x40, 0x07, 0x7d, 0x9e, 0xa2, 0x98, 0x48, 0x2f, 0x40, 0x71, 0x3b, 0xe4,
	0x5a, 0xcd, 0x66, 0x4f, 0xcc, 0xc9, 0x87, 0xf3, 0x85, 0x76, 0xc0, 0x68, 0x17, 0x86, 0x61, 0x22,
	0x35, 0x80, 0xba, 0x5b, 0xdc, 0xb3, 0xdf, 0xdb, 0xe7, 0x1d, 0xf7, 0x9d, 0x23, 0xee, 0xc9, 0xea,
	0x7c, 0xa1, 0x1d, 0xef, 0xf8, 0x8a, 0x3d, 0x43, 0x83, 0x29, 0xc1, 0x13, 0xa9, 0x06, 0x0e, 0xb7,
	0x2a, 0x8e, 0xdd, 0xb4, 0x7a, 0xb6, 0x23, 0x0a, 0x72, 0x69, 0xbe, 0xd0, 0x8a, 0x6c, 0xce, 0x41,
	0x21, 0x4c, 0xd0, 0x44, 0x16, 0xbe, 0xfd, 0x50, 0xb8, 0xfa, 0xf5, 0xdd, 0x4a, 0xe1, 0xef, 0x57,
	0x0a, 0xff, 0x7b, 0xa5, 0xf0, 0xb7, 0x6b, 0x85, 0xbb, 0x5f, 0x2b, 0xdc, 0xcf, 0xb5, 0xc2, 0x7d,
	0x78, 0xe5, 0x07, 0x64, 0x34, 0xed, 0x1b, 0x03, 0x1c, 0x99, 0xe9, 0x3e, 0xd0, 0x83, 0x1b, 0xe0,
	0x90, 0x16, 0x27, 0xd9, 0x4d, 0x98, 0xd1, 0xf5, 0x3f, 0x61, 0x77, 0x21, 0x5d, 0x83, 0xb8, 0xbf,
	0x4f, 0xc9, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x93, 0x74, 0xf3, 0x56, 0x32, 0x03, 0x00,
	0x00,
}

func (m *Wasm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wasm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wasm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.AddedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.AddedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintWasmStorage(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.WasmType != 0 {
		i = encodeVarintWasmStorage(dAtA, i, uint64(m.WasmType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bytecode) > 0 {
		i -= len(m.Bytecode)
		copy(dAtA[i:], m.Bytecode)
		i = encodeVarintWasmStorage(dAtA, i, uint64(len(m.Bytecode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintWasmStorage(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxWasmSize != 0 {
		i = encodeVarintWasmStorage(dAtA, i, uint64(m.MaxWasmSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWasmStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovWasmStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Wasm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovWasmStorage(uint64(l))
	}
	l = len(m.Bytecode)
	if l > 0 {
		n += 1 + l + sovWasmStorage(uint64(l))
	}
	if m.WasmType != 0 {
		n += 1 + sovWasmStorage(uint64(m.WasmType))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.AddedAt)
	n += 1 + l + sovWasmStorage(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxWasmSize != 0 {
		n += 1 + sovWasmStorage(uint64(m.MaxWasmSize))
	}
	return n
}

func sovWasmStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWasmStorage(x uint64) (n int) {
	return sovWasmStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Wasm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wasm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wasm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWasmStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytecode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWasmStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytecode = append(m.Bytecode[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytecode == nil {
				m.Bytecode = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasmType", wireType)
			}
			m.WasmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WasmType |= WasmType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.AddedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWasmSize", wireType)
			}
			m.MaxWasmSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWasmSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWasmStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWasmStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWasmStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWasmStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWasmStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWasmStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWasmStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWasmStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWasmStorage = fmt.Errorf("proto: unexpected end of group")
)
